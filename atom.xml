<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雪地行人</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tonywang1.github.io/"/>
  <updated>2020-04-11T05:23:50.125Z</updated>
  <id>https://tonywang1.github.io/</id>
  
  <author>
    <name>Tony Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES初识</title>
    <link href="https://tonywang1.github.io/2020/04/11/es-use/"/>
    <id>https://tonywang1.github.io/2020/04/11/es-use/</id>
    <published>2020-04-11T15:41:13.000Z</published>
    <updated>2020-04-11T05:23:50.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES初识"><a href="#ES初识" class="headerlink" title="ES初识"></a>ES初识</h1><h2 id="1、什么是ES，能解决什么问题"><a href="#1、什么是ES，能解决什么问题" class="headerlink" title="1、什么是ES，能解决什么问题"></a>1、什么是ES，能解决什么问题</h2><p>  分布式搜索分析引擎，可以提供近实时的搜索，分析，存储功能</p><h2 id="2、ES主要的使用场景是什么？"><a href="#2、ES主要的使用场景是什么？" class="headerlink" title="2、ES主要的使用场景是什么？"></a>2、ES主要的使用场景是什么？</h2><p> 搜索、分析、日志、Kibana整合进行可视化图标统计等<br>##3 主要的关键字解释</p><ul><li>文档：document -我们存储的数据，数据存储到索引中，会被分词以倒排索引的形式存储。</li><li>索引-index ：文档的数据集合</li><li>type</li><li>映射-mapping：即数据存储模板，决定了数据存到索引中以后的行为，如是否需要分词，使用什么分词等。</li><li>定义映射的时候要确定：字段是否需要全文索引，还是准确的查找，是否需要单独的分词，一段文字可以根据不同使用情况，存储多个key中，是否需要自定义数据类型</li><li>分词：各种分词插件，搜索和存储的时候会用到<br>##4下面是数据查询文档的整理：</li></ul><h2 id="下面是数据查询文档的整理："><a href="#下面是数据查询文档的整理：" class="headerlink" title="下面是数据查询文档的整理："></a>下面是数据查询文档的整理：</h2><h3 id="1-搜索"><a href="#1-搜索" class="headerlink" title="1 搜索"></a>1 搜索</h3><blockquote><ul><li>wildcard-通配符 ： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html</a></li><li>exists-值是否存在：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html</a></li><li>fuzzy-相似模糊：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html</a></li><li>prefix-前缀：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-prefix-query.html</a></li><li>range-范围：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html</a></li><li>term-字段匹配：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html</a></li><li>terms-字段in匹配：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html</a></li><li>terms-set - 集合子集匹配：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-set-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-set-query.html</a></li><li>Match-all-全集合查询：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-all-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-all-query.html</a></li><li>Mathch-全文检索：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html</a></li><li>Mathch-Phrase - 短语全文检索：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html</a></li><li>Bool - 组合查询：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html</a></li><li>boosting-得分分配：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-boosting-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-boosting-query.html</a></li><li>Query与Filter区别：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html</a></li></ul></blockquote><h3 id="2-组合统计"><a href="#2-组合统计" class="headerlink" title="2 组合统计"></a>2 组合统计</h3><blockquote><ul><li>AVG-平均数：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-avg-aggregation.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-avg-aggregation.html</a></li><li>MAX-最大值：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-max-aggregation.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-max-aggregation.html</a></li><li>MIN-最小值：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-min-aggregation.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-min-aggregation.html</a></li><li>Stat-最大最小平均数：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-stats-aggregation.html、" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-stats-aggregation.html、</a></li><li>Sum-求和：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-sum-aggregation.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-sum-aggregation.html</a></li><li>分组统计：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html</a></li><li>先过滤在统计：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filter-aggregation.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filter-aggregation.html</a></li></ul></blockquote><blockquote><ul><li>数据类型：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html</a></li><li>自带元数据：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-fields.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-fields.html</a></li><li>创建索引：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html</a></li><li>创建mapping: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/properties.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/properties.html</a></li><li>创建mapping：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html</a></li><li>更新查看mapping：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html#update-mapping" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html#update-mapping</a></li></ul></blockquote><h3 id="3-java-api的入口"><a href="#3-java-api的入口" class="headerlink" title="3 java api的入口"></a>3 java api的入口</h3><blockquote><ul><li>api：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></li><li>创建索引：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-index.html</a></li><li>Get请求：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-get.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-get.html</a></li><li>是否存在搜索内容：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-exists.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-exists.html</a></li><li>批量执行：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-bulk.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-bulk.html</a></li><li>搜索：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-search.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-search.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES初识&quot;&gt;&lt;a href=&quot;#ES初识&quot; class=&quot;headerlink&quot; title=&quot;ES初识&quot;&gt;&lt;/a&gt;ES初识&lt;/h1&gt;&lt;h2 id=&quot;1、什么是ES，能解决什么问题&quot;&gt;&lt;a href=&quot;#1、什么是ES，能解决什么问题&quot; class=&quot;header
      
    
    </summary>
    
      <category term="中间件" scheme="https://tonywang1.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="中间件" scheme="https://tonywang1.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>linux中脚本介绍</title>
    <link href="https://tonywang1.github.io/2020/04/11/linux_shell/"/>
    <id>https://tonywang1.github.io/2020/04/11/linux_shell/</id>
    <published>2020-04-11T15:41:13.000Z</published>
    <updated>2020-04-23T11:43:13.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志清理脚本"><a href="#日志清理脚本" class="headerlink" title="日志清理脚本"></a>日志清理脚本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">统计一定数量的日志，然后根据时间删除</span></span><br><span class="line">logpath="/data/tomcat/logs"</span><br><span class="line">count=`find  /data/tomcat/logs  -name "*.log" -o -name "*.txt" -type f -mtime +3 | wc -l`</span><br><span class="line">echo  "$count";</span><br><span class="line">if [ "$count" -lt "20" ];then</span><br><span class="line">    echo "file is less 20. no file is removed."</span><br><span class="line">    exit 0;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">find <span class="variable">$logpath</span>  -name <span class="string">"*.log"</span> -o -name <span class="string">"*.txt"</span> -<span class="built_in">type</span> f -mtime +5 -<span class="built_in">exec</span> rm &#123;&#125; \; &gt; /dev/null 2&gt;&amp;1 ;</span></span><br><span class="line">find  /data/tomcat/logs  -name "*.log"  -mtime +3 -exec rm &#123;&#125; \; </span><br><span class="line">find  /data/tomcat/logs  -name "*.txt"  -mtime +3 -exec rm &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">count2=` find  /data/tomcat/logs  -name "*.log" -o -name "*.txt" -type f -mtime +10 | wc -l`</span><br><span class="line">echo "$count2"</span><br></pre></td></tr></table></figure><h2 id="2、JAVA项目启动脚本"><a href="#2、JAVA项目启动脚本" class="headerlink" title="2、JAVA项目启动脚本"></a>2、JAVA项目启动脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;杀掉springboot线程&quot;</span><br><span class="line">pgrep -f 项目名称|xargs kill -9</span><br><span class="line">echo &quot;项目启动&quot;</span><br><span class="line">nohup  java -server -Xms1096m -Xmx1096m -jar  项目的.jar &gt; out.log 2&gt;&amp;1 &amp;</span><br><span class="line">tail -f -n500 out.log</span><br></pre></td></tr></table></figure><h2 id="3、服务的启动关闭脚本"><a href="#3、服务的启动关闭脚本" class="headerlink" title="3、服务的启动关闭脚本"></a>3、服务的启动关闭脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">    source /etc/profile</span><br><span class="line">    cd /usr/local/source/kong</span><br><span class="line">    make install</span><br><span class="line">    /usr/local/openresty/bin/kong start</span><br><span class="line">    cd /</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">stop() &#123;</span><br><span class="line">    source /etc/profile</span><br><span class="line">    kong stop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reload() &#123;</span><br><span class="line">    source /etc/profile</span><br><span class="line">    cd /usr/local/source/kong</span><br><span class="line">    make install</span><br><span class="line">    /usr/local/openresty/bin/kong start</span><br><span class="line">    cd /</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status()&#123;</span><br><span class="line">    if test $( pgrep -f nginx | wc -l ) -eq 0; then</span><br><span class="line">        echo &quot;is not running&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;is running&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    #count=`ps -ef |grep nginx |grep -v &quot;grep&quot; |wc -l`</span><br><span class="line">    #if [ 0 == $count ];then</span><br><span class="line">    #    echo &quot;is not running&quot;</span><br><span class="line">    #else</span><br><span class="line">    #    echo &quot;is running&quot;</span><br><span class="line">    #fi</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">case $1 in</span><br><span class="line">    start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    stop)  </span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">    restart)</span><br><span class="line">        reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        status</span><br><span class="line">        exit $?  </span><br><span class="line">        ;;</span><br><span class="line">    kill)</span><br><span class="line">        terminate</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        echo -e &quot;no parameter&quot;</span><br><span class="line">        ;;</span><br><span class="line">esac    </span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日志清理脚本&quot;&gt;&lt;a href=&quot;#日志清理脚本&quot; class=&quot;headerlink&quot; title=&quot;日志清理脚本&quot;&gt;&lt;/a&gt;日志清理脚本&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="LINUX" scheme="https://tonywang1.github.io/categories/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://tonywang1.github.io/tags/LINUX/"/>
    
  </entry>
  
  <entry>
    <title>架构整理</title>
    <link href="https://tonywang1.github.io/2020/03/10/struct/"/>
    <id>https://tonywang1.github.io/2020/03/10/struct/</id>
    <published>2020-03-10T15:41:13.000Z</published>
    <updated>2020-03-11T02:02:03.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="架构知识整理"><a href="#架构知识整理" class="headerlink" title="架构知识整理"></a>架构知识整理</h1><h2 id="1、一些开源项目的记录"><a href="#1、一些开源项目的记录" class="headerlink" title="1、一些开源项目的记录"></a>1、一些开源项目的记录</h2><ul><li><p>vm下载地址：<a href="http://www.downza.cn/soft/277470.html" target="_blank" rel="noopener">http://www.downza.cn/soft/277470.html</a></p></li><li><p>淘宝开源项目汇总：<a href="https://www.javazhiyin.com/33790.html" target="_blank" rel="noopener">https://www.javazhiyin.com/33790.html</a></p></li><li><p>阿里开源的jar：<a href="https://www.mvnjar.com/com.alibaba.middleware/list.html" target="_blank" rel="noopener">https://www.mvnjar.com/com.alibaba.middleware/list.html</a></p></li><li><p>arthas项目：<a href="https://alibaba.github.io/arthas/arthas-tutorials?language=cn" target="_blank" rel="noopener">https://alibaba.github.io/arthas/arthas-tutorials?language=cn</a></p></li><li><p>mybatis通用mapper：<a href="https://gitee.com/free/Mapper/wikis/Home" target="_blank" rel="noopener">https://gitee.com/free/Mapper/wikis/Home</a></p></li><li><p>sql解析器：<a href="https://github.com/JSQLParser/JSqlParser" target="_blank" rel="noopener">https://github.com/JSQLParser/JSqlParser</a></p><h2 id="2、项目与开源项目的契合点"><a href="#2、项目与开源项目的契合点" class="headerlink" title="2、项目与开源项目的契合点"></a>2、项目与开源项目的契合点</h2></li><li><p>监控：Prometheus,alertmanager,<br>   puppet+zabbix，或者saltstack+zabbix<br>   open-falcon全监控</p></li><li><p>日志：flink(实时分析，实时监控，ETL，告警 )、flume ，es存储</p></li><li><p>网关：Kong、</p></li><li><p>自动化运维：SaltStack</p></li><li><p>自动部署： jenkins</p></li><li><p>自建cdn：squid dns</p></li><li><p>机器硬件信息采集：puppet</p></li><li><p>自建dns ：powerdns（github上），smartdns(<a href="https://github.com/pymumu/smartdns/releases" target="_blank" rel="noopener">https://github.com/pymumu/smartdns/releases</a>)</p></li><li><p>切图工具：</p></li><li><p>代码管理：svn、git(Webhooks机制做代码部署)</p></li><li><p>存储工具：ceph 、TFS、FastDFS</p></li><li><p>微服务：<br>dubbo(<a href="https://github.com/dubbo)(https://github.com/apache/dubbo-spring-boot-project)" target="_blank" rel="noopener">https://github.com/dubbo)(https://github.com/apache/dubbo-spring-boot-project)</a>,<br>spring cloud(<a href="https://www.springcloud.cc/" target="_blank" rel="noopener">https://www.springcloud.cc/</a>)( <a href="https://github.com/spring-cloud" target="_blank" rel="noopener">https://github.com/spring-cloud</a> ) ,<br>SOFABoot<br>Service Mesh：Envoy</p></li><li><p>代码质量：Sonar</p></li><li><p>自动伸缩部署：容器、Istio、</p></li><li><p>分布式追踪系统： SkyWalking </p></li><li><p>服务网格：Istio、Linkerd</p></li><li><p>测试：jmeter</p></li><li><p>rpc：grpc </p></li><li><p>跨语言通信方案 Thrift、Protobuf、Avro</p></li><li><p>深度学习框架：TensorFlow、Keras等</p></li><li><p>服务器数据上报：puppet</p></li><li><p>反编译：<a href="http://java-decompiler.github.io/" target="_blank" rel="noopener">http://java-decompiler.github.io/</a></p></li><li><p>网页流量统计网站：<a href="http://www.matomo.net.cn/category/tutorial/" target="_blank" rel="noopener">http://www.matomo.net.cn/category/tutorial/</a></p></li><li><p>AB测试灰度发布-*团服务治理也是参考这个的：<a href="https://github.com/CNSRE/ABTestingGateway.git" target="_blank" rel="noopener">https://github.com/CNSRE/ABTestingGateway.git</a></p></li><li><p>CAT ：应用系统实时监控以及告警 </p></li><li><p>HTTP/2：可以对数据压缩增加传输速度 </p></li><li><p>数据库中间件：DBProxy(美团)，Atlas（<a href="https://github.com/Qihoo360/Atlas），mycat（http://www.mycat.io/），Zebra（美团）" target="_blank" rel="noopener">https://github.com/Qihoo360/Atlas），mycat（http://www.mycat.io/），Zebra（美团）</a></p></li><li><p>数据库sharding： Hibernate Shards 、 Ibatis-Sharding，TDDL（阿里）</p></li><li><p>ID生成策略:数据库自增、uuid、snowflake、依赖mysql生成自增（美团点评leaf） </p></li><li><p>分布式任务调度：<a href="https://www.xuxueli.com/xxl-job/（调度、单点、缓存、服务注册）" target="_blank" rel="noopener">https://www.xuxueli.com/xxl-job/（调度、单点、缓存、服务注册）</a></p></li><li><p>KMS统一密钥管理系统:参考<a href="https://github.com/ligson/kms/blob/master/README.md" target="_blank" rel="noopener">https://github.com/ligson/kms/blob/master/README.md</a></p></li><li><p>camus：kafka数据导入到hdfs的解决方案</p></li></ul><ul><li>服务通信框架、弹性负载均衡、服务治理代理（服务注册/发现、配置更新、访问控制、上报调用情况）、服务治理平台、<br>命名服务、配置中心、健康检查、</li><li>限流：Guava的RateLimiter</li><li>断路器、线程池隔离：Hystrix</li><li>流量控制、熔断降级、系统负载保护：Sentinel (<a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a>)</li><li>服务注册和发现：ZooKeeper、Eureka、Consul 、Nacos</li></ul><ul><li>共享元数据、数据分级、审计、安全性以及数据保护：Atlas<br>权限控制：Apache Ranger</li><li>KV存储tair-redis集群（Codis）：<a href="https://github.com/alibaba/tair/wiki/%E4%B8%AD%E6%96%87%E4%B8%BB%E9%A1%B5" target="_blank" rel="noopener">https://github.com/alibaba/tair/wiki/%E4%B8%AD%E6%96%87%E4%B8%BB%E9%A1%B5</a></li><li>Codis：<a href="https://github.com/CodisLabs/codis" target="_blank" rel="noopener">https://github.com/CodisLabs/codis</a></li></ul><ul><li><p>全链路线上压测的目的主要有：参考：<br>① 了解整个系统的处理能力<br>② 排查性能瓶颈<br>③ 验证限流、降级、熔断、报警等机制是否符合预期并分析数据反过来调整这些阈值等信息<br>④ 发布的版本在业务高峰的时候是否符合预期<br>⑤ 验证系统的依赖是否符合预期</p></li><li><p>美团可用性实践：<a href="https://tech.meituan.com/2018/04/19/trade-high-availability-in-action.html" target="_blank" rel="noopener">https://tech.meituan.com/2018/04/19/trade-high-availability-in-action.html</a></p></li><li><p>美团点评中间件技术介绍：<a href="https://awps-assets.meituan.net/mit-x/slide-bundle-2018/34/1-%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8A%80%E6%9C%AF.pdf" target="_blank" rel="noopener">https://awps-assets.meituan.net/mit-x/slide-bundle-2018/34/1-%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8A%80%E6%9C%AF.pdf</a></p></li><li><p>服务间调用解耦参考：<a href="https://tech.meituan.com/2018/07/26/sep-service-arrange.html" target="_blank" rel="noopener">https://tech.meituan.com/2018/07/26/sep-service-arrange.html</a></p></li><li><p>美团规则引擎设计：<a href="https://tech.meituan.com/2017/06/09/maze-framework.html" target="_blank" rel="noopener">https://tech.meituan.com/2017/06/09/maze-framework.html</a></p></li><li><p>开源规则引擎drools：<a href="https://www.drools.org/" target="_blank" rel="noopener">https://www.drools.org/</a></p></li><li><p>字节码增强：<a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html" target="_blank" rel="noopener">https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html</a></p></li><li><p>美团移动网络优化：<a href="https://tech.meituan.com/2017/03/17/shark-sdk.html" target="_blank" rel="noopener">https://tech.meituan.com/2017/03/17/shark-sdk.html</a></p></li><li><p>美团定制化路由：<a href="https://tech.meituan.com/2018/09/06/oceanus-custom-traffic-routing.html" target="_blank" rel="noopener">https://tech.meituan.com/2018/09/06/oceanus-custom-traffic-routing.html</a></p></li><li><p>美团权限系统：<a href="https://tech.meituan.com/2019/02/14/data-security-platform-construction-practice-jiangjunling.html" target="_blank" rel="noopener">https://tech.meituan.com/2019/02/14/data-security-platform-construction-practice-jiangjunling.html</a></p></li><li><p>美团日志收集：<a href="https://tech.meituan.com/2020/01/09/meituan-logan.html" target="_blank" rel="noopener">https://tech.meituan.com/2020/01/09/meituan-logan.html</a></p></li><li><p>mysql的binlog同步机制：<a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">https://github.com/alibaba/canal</a></p></li><li><p>mysql数据同步参考：<a href="https://github.com/hjx601496320/plumber" target="_blank" rel="noopener">https://github.com/hjx601496320/plumber</a></p></li><li><p>数据库变更抓取：<a href="https://github.com/linkedin/databus/blob/master/README.md" target="_blank" rel="noopener">https://github.com/linkedin/databus/blob/master/README.md</a><br>1）主数据库和衍生数据库的同步<br>2）将数据库数据同步到缓存中</p></li></ul><ul><li>ESB代表项目：JBOSS ESB,Mule,Camel 以及一些其他的esb项目</li><li>ESB和服务注册之间的区别：<br>1、两类开源项目侧重点不同，ESB侧重任务的编排，性能问题可通过异构的方式来进行规避。无法支持特别大的并发<br>2、服务注册侧重服务的治理，将各个服务颗粒化，各个子业务系统在程序逻辑上完成业务的编排。但是比较实用较大的并发量，因为dubbo类的只是存放服务地址。</li><li>有zookeeper类的分布式通讯框架，能保证单点的失败不影响整个系统的业务调用，因为业务接口都是在各个提供服务的子系统中。</li></ul><h2 id="3、360开源项目"><a href="#3、360开源项目" class="headerlink" title="3、360开源项目"></a>3、360开源项目</h2><ul><li><p>1）类Redis存储系统 Pika，<a href="https://github.com/Qihoo360/pika" target="_blank" rel="noopener">https://github.com/Qihoo360/pika</a></p></li><li><p>2）日志搜索平台 Poseidon</p></li><li><p>3）高性能分布式存储服务 HustStore</p></li><li><p>4）抓包工具 MySQL Sniffer</p></li><li><p>5）代码质量检测工具 GoReporter，<a href="https://github.com/wgliang/goreporter" target="_blank" rel="noopener">https://github.com/wgliang/goreporter</a></p></li><li><p>6）配置管理工具QConf，<a href="https://github.com/Qihoo360/QConf/blob/master/README_ZH.md" target="_blank" rel="noopener">https://github.com/Qihoo360/QConf/blob/master/README_ZH.md</a></p><h2 id="4、阿里巴巴开源项目"><a href="#4、阿里巴巴开源项目" class="headerlink" title="4、阿里巴巴开源项目"></a>4、阿里巴巴开源项目</h2><blockquote><ul><li>1 分布式应用服务开发的一站式解决方案 Spring Cloud Alibaba<br>地址：<a href="https://github.com/spring-cloud-incubator/spring-cloud-alibaba" target="_blank" rel="noopener">https://github.com/spring-cloud-incubator/spring-cloud-alibaba</a></li><li>2 JDBC 连接池、监控组件 Druid<br>地址：<a href="https://github.com/alibaba/druid" target="_blank" rel="noopener">https://github.com/alibaba/druid</a></li><li>3 服务框架 Dubbo<br>地址：<a href="https://github.com/alibaba/dubbo" target="_blank" rel="noopener">https://github.com/alibaba/dubbo</a></li><li>4 企业级流式计算引擎 JStorm<br>地址：<a href="https://github.com/alibaba/jstorm" target="_blank" rel="noopener">https://github.com/alibaba/jstorm</a></li><li>5 分布式数据层 TDDL<br>地址：<a href="https://github.com/alibaba/tb_tddl" target="_blank" rel="noopener">https://github.com/alibaba/tb_tddl</a></li><li>6 Java 图片处理类库 SimpleImage<br>地址：<a href="https://github.com/alibaba/simpleimage" target="_blank" rel="noopener">https://github.com/alibaba/simpleimage</a></li><li>7 开源 Java 诊断工具 Arthas</li><li>8.动态服务发现、配置和服务管理平台 Nacos<br>地址：<a href="https://nacos.io/en-us/" target="_blank" rel="noopener">https://nacos.io/en-us/</a></li><li>9.Java 解析 Excel 工具 easyexcel<br>地址：<a href="https://github.com/alibaba/easyexcel" target="_blank" rel="noopener">https://github.com/alibaba/easyexcel</a></li><li>10.高可用流量管理框架 Sentinel<br>地址：<a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel</a></li><li>11.基于多维度 Metrics 的系统度量和监控中间件 SOFALookout<br>地址：<a href="https://github.com/alipay/sofa-lookout" target="_blank" rel="noopener">https://github.com/alipay/sofa-lookout</a></li><li>12.基于 Spring Boot 的研发框架 SOFABoot<br>地址：<a href="https://github.com/alipay/sofa-boot" target="_blank" rel="noopener">https://github.com/alipay/sofa-boot</a></li><li>13 轻量级分布式数据访问层 CobarClient<br>地址：<a href="https://github.com/alibaba/cobarclient" target="_blank" rel="noopener">https://github.com/alibaba/cobarclient</a></li></ul></blockquote><h2 id="5、关键词介绍"><a href="#5、关键词介绍" class="headerlink" title="5、关键词介绍"></a>5、关键词介绍</h2><ul><li>CQRS：CQRS（Command Query Responsibility Segration）架构，大家应该不会陌生了。简单的说，就是一个系统，<br>从架构上把它拆分为两部分：命令处理（写请求）+查询处理（读请求）。然后读写两边可以用不同的架构实现，<br>以实现CQ两端（即Command Side，简称C端；Query Side，简称Q端）的分别优化。CQRS作为一个读写分离思想的架构，<br>在数据存储方面，没有做过多的约束</li><li>MDM：Master Data Management，翻译为主数据管理或元数据管理<br>高性能规则：避开网络开销（IO），避开海量数据，避开资源争夺</li></ul></li></ul><h2 id="6、问题整理"><a href="#6、问题整理" class="headerlink" title="6、问题整理"></a>6、问题整理</h2><ul><li>1 解决APP中DNS劫持和公网DNS依赖导致的问题<br>自己维护域名和ip对应关系表，通过检测找出速度最快的，然后通过ip进行接口访问</li><li>2 APP通过长连接提升访问速度<br>APP通过TCP访问中间代理长连服务器（IP直连，减少公网DNS依赖），<br>然后代理服务器通过http短链接访问我们自己的服务器（1 建设专线提高访问速度，2自建DNS减小公网DNS的依赖）， </li><li>3 HTTP流量定制化路由，可以参考AB测试灰度发布,nginx添加lua，根据不同规则进行路由<br>HTTP负载均衡-LB-美团的Oceanus（可以进行拆分为：4层LB、7层LB）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;架构知识整理&quot;&gt;&lt;a href=&quot;#架构知识整理&quot; class=&quot;headerlink&quot; title=&quot;架构知识整理&quot;&gt;&lt;/a&gt;架构知识整理&lt;/h1&gt;&lt;h2 id=&quot;1、一些开源项目的记录&quot;&gt;&lt;a href=&quot;#1、一些开源项目的记录&quot; class=&quot;header
      
    
    </summary>
    
      <category term="架构" scheme="https://tonywang1.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://tonywang1.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>tkmybatis集成</title>
    <link href="https://tonywang1.github.io/2020/03/10/java-tkmybatist/"/>
    <id>https://tonywang1.github.io/2020/03/10/java-tkmybatist/</id>
    <published>2020-03-10T15:41:13.000Z</published>
    <updated>2020-03-10T09:20:23.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cloud-test"><a href="#cloud-test" class="headerlink" title="cloud_test"></a>cloud_test</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p> spring，tk.mybatis 与PageHelper的集成</p><p> 參考：<br> <a href="https://github.com/godlike110/tk-mybatis" target="_blank" rel="noopener">https://github.com/godlike110/tk-mybatis</a><br> <a href="https://github.com/abel533/MyBatis-Spring-Boot" target="_blank" rel="noopener">https://github.com/abel533/MyBatis-Spring-Boot</a></p><h2 id="集成步骤"><a href="#集成步骤" class="headerlink" title="集成步骤"></a>集成步骤</h2><ul><li><p>1 添加maven<br>  mapper-spring-boot-starter<br>  pagehelper-spring-boot-starter</p></li><li><p>2 添加mybatis配置MybatisConfiguration</p></li><li><p>3 所有mapper继承Mapper  </p></li><li><p>4 需要分页的地方调用<br>PageHelper.startPage(currentPage, pageSize);</p></li><li><p>5 分页返回的列表需要强制转换为page：<br>PageInfo(list);</p></li><li><p>6 实体和字段映射关系，需要在实体上添加注解 </p></li><li><h1 id="集成实例"><a href="#集成实例" class="headerlink" title="集成实例"></a>集成实例</h1></li><li><p><a href="https://github.com/tonywang1/cloud_test.git" target="_blank" rel="noopener">集成实例</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;cloud-test&quot;&gt;&lt;a href=&quot;#cloud-test&quot; class=&quot;headerlink&quot; title=&quot;cloud_test&quot;&gt;&lt;/a&gt;cloud_test&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="JAVA" scheme="https://tonywang1.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://tonywang1.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>GIT使用</title>
    <link href="https://tonywang1.github.io/2020/02/28/git-know-use/"/>
    <id>https://tonywang1.github.io/2020/02/28/git-know-use/</id>
    <published>2020-02-28T15:41:13.000Z</published>
    <updated>2020-02-29T10:01:29.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GIT使用"><a href="#GIT使用" class="headerlink" title="GIT使用"></a>GIT使用</h1><hr><h2 id="1-什么是GIT"><a href="#1-什么是GIT" class="headerlink" title="1.什么是GIT"></a>1.什么是GIT</h2><p> 免费开源的分布式版本控制系统，小或者大的工程使适应</p><h2 id="2-GIT作用和优点"><a href="#2-GIT作用和优点" class="headerlink" title="2.GIT作用和优点"></a>2.GIT作用和优点</h2><p> GIT有工作区间、本地仓库、远程仓库，在没有网络的情况下依然可以用本地仓库进行版本控制。</p><h2 id="3-GIT中涉及到的关键字与关键词"><a href="#3-GIT中涉及到的关键字与关键词" class="headerlink" title="3.GIT中涉及到的关键字与关键词"></a>3.GIT中涉及到的关键字与关键词</h2><ul><li>HEADER 当前活跃的分支</li><li>origin 默认远程仓库的名称</li></ul><h2 id="4-git工作流程：-git有三个工作树，即工作目录"><a href="#4-git工作流程：-git有三个工作树，即工作目录" class="headerlink" title="4.git工作流程： git有三个工作树，即工作目录"></a>4.git工作流程： git有三个工作树，即工作目录</h2><blockquote><p>1）本地工作目录，它持有实际文件<br>2）暂存区域，像一个缓存区域，保存你的改动<br>3）HEAD区域，指向你最后一次提交的结果。<br>   每次提交的时候，add文件，则文件提交到暂存区域即第二个区域，然后commit文件，则文件会被提交到HEAD区域，<br>这个时候其他人还看不到文件的改动，最后需要push，将文件推送到远端的服务器上 </p></blockquote><h2 id="5-GIT中常用的命令以及使用场景"><a href="#5-GIT中常用的命令以及使用场景" class="headerlink" title="5.GIT中常用的命令以及使用场景"></a>5.GIT中常用的命令以及使用场景</h2><ul><li><p>创建新仓库：创建新文件夹，打开，然后执行    git init</p></li><li><p>检出仓库：<br> 本地：git clone /path/to/repository<br> 远端：git clone username@host:/path/to/repository</p></li><li><p>提交文件<br>$ git status -s<br>git add <filename><br>git commit -m “代码提交信息”<br>git  pull     #（将服务器项目与本地项目合并）<br>git push origin master  可以把 master 换成你想要推送的任何分支</filename></p></li><li><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：<br>git remote add origin <server><br>（git remote add origin master或 git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:YotrolZ/helloTest.git ）<br>删除本地和远程的关联关系： git remote remove origin <server> </server></server></p></li><li><p>要更新你的本地仓库至最新改动，执行：<br>git pull</p></li><li><p>在合并改动之前，你可以使用如下命令预览差异<br>git diff <source_branch> <target_branch></target_branch></source_branch></p></li><li><p>获取（fetch） 并 合并（merge） 远端的改动。 要合并其他分支到你的当前分支（例如 master）<br>git merge <branch></branch></p></li><li><p>并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：<br>git add <filename></filename></p></li><li><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：<br>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。<br>git checkout – <filename></filename></p></li><li><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：<br>git fetch origin（当某个分支看不到的时候，可以这样进行索引更新） - 更新远程分支最新信息到本地，会将远程新创建的分支信息写到 FETCH_HEAD(所有的分支信息)文件中<br>git reset –hard origin/master1111</p></li><li><p>查看远程有什么数据仓库<br>git remote -v</p></li><li><p>git版本回退<br>查看所有版本号<br>git reflog</p></li></ul><p>根据版本号恢复到某个版本<br>git reset –hard 6fcfc89</p><ul><li><p>$ git push origin :master<br>等同于<br>$ git push origin –delete master</p></li><li><p>直接提交：<br>git push origin source -f</p></li></ul><h2 id="6-git的分支管理"><a href="#6-git的分支管理" class="headerlink" title="6.git的分支管理"></a>6.git的分支管理</h2><blockquote><p>git分支操作在本地建立分支，然后与本地主枝合并，最终提交到服务器。有效的避免了因个人操作不当向服务器提交过多脏数据，避免频繁git clone服务器来更新本地库。</p></blockquote><p>分支操作指令：</p><ul><li>建立分支<br>git branch AAA     #建立分支AAA</li><li>分支切换<br>git checkout AAA    #从当前分支切换到AAA分支</li><li>将分支与主枝master合并<br>git checkout master     #（首先切换回主枝）<br>git merge AAA         #（将分支AAA与主枝合并）</li><li>当前分支查看<br>git  branch            #默认有master（也称为主枝）<br>git  branch –a 查看当前所有分支</li><li>删除分支<br>git branch –d  AAA     #删除分支AAA</li><li>删除所有 有远程分支的本地分支<br>git remote prune origin  </li></ul><h2 id="7-gitignore使用，根目录创建文件-gitignore"><a href="#7-gitignore使用，根目录创建文件-gitignore" class="headerlink" title="7..gitignore使用，根目录创建文件.gitignore"></a>7..gitignore使用，根目录创建文件.gitignore</h2><p> 忽略根目录文件：/.project<br> 忽略根目录下的目录：/target/<br> 注意：忽略的目录和文件必须是git没有追踪的（untraced）,如果文件或者目录是已经设置了跟踪，则需要先删除版本库跟踪，然后提交（git commit -m “评”），这时候文件夹或者文件的忽略跟踪才会生效</p><pre><code>git 删除被管理的文件 git rm —cached filePathgit 删除被管理的文件夹 git rm -r -f —cached filePathgit 不再追踪文件改动 git update-index --assume-unchanged filePathgit 恢复追踪文件改动 git update-index —no-assume-unchanged filePath</code></pre><p>  原则：文件未追踪的情况下，添加到.gitignore中，达到忽略文件提交的目的<br>  如果文件已经提交或者已经添加追踪，则删除提交或者删除追踪即可</p><h2 id="7-elipse中使用git"><a href="#7-elipse中使用git" class="headerlink" title="7.elipse中使用git"></a>7.elipse中使用git</h2><blockquote><p>  1 Add to Index ，添加文件到git追踪下<br>  2 Remove from Index ，文件去掉git追踪</p><p>  3 team-&gt;commit 提交文件到本地仓库<br>  4 team-&gt;Repository-&gt;Push to upstream或者push Branch Master 提交到远程共享仓库<br>  5 replace -&gt; head Revision 本地仓库最新文件<br>  6 replace -&gt; Prevision Revision   新版本<br>  7 文件冲突<br>    pull 将新文件下载下来，手动解决冲突，<br>    add 然后push新文件到线上</p></blockquote><h2 id="7-SOURCETREE修改用户名和密码"><a href="#7-SOURCETREE修改用户名和密码" class="headerlink" title="7.SOURCETREE修改用户名和密码"></a>7.SOURCETREE修改用户名和密码</h2><p>删除C:\Users%USERNAME%\AppData\Local\Atlassian\SourceTree 目录下的passwd文件， 能移除掉保存的密码。<br>删除C:\Users%USERNAME%\AppData\Local\Atlassian\SourceTree 目录下的userhosts文件， 能移除掉保存的用户名</p><h2 id="8-可能会遇到的问题"><a href="#8-可能会遇到的问题" class="headerlink" title="8.可能会遇到的问题"></a>8.可能会遇到的问题</h2><p> 如果账号密码有变动，需要修改的话：<br>1 删除：AppData\Local\Atlassian\SourceTree\passwd<br>2  git config –system –unset credential.helper<br>   不行的话git config –global http.emptyAuth true</p><p>git异常ssl权限问题：git config –global http.sslVerify false </p><h2 id="7-主要参考"><a href="#7-主要参考" class="headerlink" title="7.主要参考"></a>7.主要参考</h2><ul><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">安装包下载</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GIT使用&quot;&gt;&lt;a href=&quot;#GIT使用&quot; class=&quot;headerlink&quot; title=&quot;GIT使用&quot;&gt;&lt;/a&gt;GIT使用&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-什么是GIT&quot;&gt;&lt;a href=&quot;#1-什么是GIT&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="GIT" scheme="https://tonywang1.github.io/categories/GIT/"/>
    
    
      <category term="GIT" scheme="https://tonywang1.github.io/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>字节码增强</title>
    <link href="https://tonywang1.github.io/2020/01/20/java-bytecode-enhancement/"/>
    <id>https://tonywang1.github.io/2020/01/20/java-bytecode-enhancement/</id>
    <published>2020-01-20T15:41:13.000Z</published>
    <updated>2020-01-20T03:08:28.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA字节码增强"><a href="#JAVA字节码增强" class="headerlink" title="JAVA字节码增强"></a>JAVA字节码增强</h1><hr><h2 id="1-什么是字节码"><a href="#1-什么是字节码" class="headerlink" title="1.什么是字节码"></a>1.什么是字节码</h2><p> java源代码编译以后的class文件为字节码</p><h2 id="2-如何对字节码进行修改"><a href="#2-如何对字节码进行修改" class="headerlink" title="2.如何对字节码进行修改"></a>2.如何对字节码进行修改</h2><p> asm、javassist等类库进行修改</p><h2 id="3-字节码修改以后如何动态替换运行时JVM中对应的信息"><a href="#3-字节码修改以后如何动态替换运行时JVM中对应的信息" class="headerlink" title="3.字节码修改以后如何动态替换运行时JVM中对应的信息"></a>3.字节码修改以后如何动态替换运行时JVM中对应的信息</h2><p>pid-&gt; javaagaent(agent加载到运行时jvm上) -&gt; Instrumentation(Transformer替换那个class文件)<br>-&gt; ClassFileTransformer(字节码对方法进行修改) -&gt;  </p><h2 id="4-字节码增强运用场景"><a href="#4-字节码增强运用场景" class="headerlink" title="4.字节码增强运用场景"></a>4.字节码增强运用场景</h2><ul><li>热部署：不部署服务而对线上服务做修改，可以做打点、增加日志等操作。</li><li>性能诊断工具：比如bTrace就是利用Instrument，实现无侵入地跟踪一个正在运行的JVM，监控到类和方法级别的状态信息。</li><li>AOP</li></ul><h2 id="5-idea插件jclasslib"><a href="#5-idea插件jclasslib" class="headerlink" title="5.idea插件jclasslib"></a>5.idea插件jclasslib</h2><p> 查看字节码工具</p><h2 id="6-主要参考"><a href="#6-主要参考" class="headerlink" title="6.主要参考"></a>6.主要参考</h2><ul><li><a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html" target="_blank" rel="noopener">美团字节码增强总结文章</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JAVA字节码增强&quot;&gt;&lt;a href=&quot;#JAVA字节码增强&quot; class=&quot;headerlink&quot; title=&quot;JAVA字节码增强&quot;&gt;&lt;/a&gt;JAVA字节码增强&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-什么是字节码&quot;&gt;&lt;a href=&quot;#1-什么是字节码&quot; cl
      
    
    </summary>
    
      <category term="JAVA" scheme="https://tonywang1.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://tonywang1.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Lua语言基础</title>
    <link href="https://tonywang1.github.io/2019/11/26/lua_basic/"/>
    <id>https://tonywang1.github.io/2019/11/26/lua_basic/</id>
    <published>2019-11-26T15:41:13.000Z</published>
    <updated>2019-11-26T08:12:36.531Z</updated>
    
    <content type="html"><![CDATA[<p>#LUA语言简介</p><hr><h2 id="1-什么是Lua语言"><a href="#1-什么是Lua语言" class="headerlink" title="1.什么是Lua语言"></a>1.什么是Lua语言</h2><p>  Lua是一种强大，高效，轻量级，可嵌入的脚本语言</p><h2 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h2><p>它用标准C语言编写并以源代码形式开放，编译后仅仅一百余K，可以很方便的嵌入别的程序里</p><h2 id="3-LUA能解决什么问题"><a href="#3-LUA能解决什么问题" class="headerlink" title="3.LUA能解决什么问题"></a>3.LUA能解决什么问题</h2><p>Nginx + lua　处理http请求时，可在11个阶段插入lua脚本<br>redis + lua 　实现原子操作，避免多线程数据不一致的问题</p><h2 id="3-LUA环境搭建"><a href="#3-LUA环境搭建" class="headerlink" title="3.LUA环境搭建"></a>3.LUA环境搭建</h2><p><a href="https://www.runoob.com/lua/lua-environment.html" target="_blank" rel="noopener">搭建参照</a></p><h2 id="4-基础语法记录-主要记录学习中独特的地方"><a href="#4-基础语法记录-主要记录学习中独特的地方" class="headerlink" title="4.基础语法记录-主要记录学习中独特的地方"></a>4.基础语法记录-主要记录学习中独特的地方</h2><p>1) <a href="https://www.runoob.com/lua/lua-basic-syntax.html" target="_blank" rel="noopener">基础语法学习参照</a><br>2)逻辑运算符短路求值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and逻辑与操作符。 “短路求值” 若 A 为 false，则返回 A，否则返回 B。(A and B) 为 false。</span><br><span class="line">or逻辑或操作符。“短路求值”  若 A 为 true，则返回 A，否则返回 B。(A or B) 为 true。</span><br></pre></td></tr></table></figure><p>3)bool类型<br>lua中除了false和nil之外，其他所有数据，包括0、空字符串等都是true。<br>4) 类型判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(type(&quot;Hello world&quot;))      --&gt; string</span><br><span class="line">print(type(10.4*3))             --&gt; number</span><br><span class="line">print(type(print))              --&gt; function</span><br><span class="line">print(type(type))               --&gt; function</span><br><span class="line">print(type(true))               --&gt; boolean</span><br><span class="line">print(type(nil))                --&gt; nil</span><br><span class="line">print(type(type(X)))            --&gt; string</span><br></pre></td></tr></table></figure><p>5)nil删除功能<br>对于全局变量和 table，nil 还有一个”删除”作用，给全局变量或者 table 表里的变量赋一个 nil 值，等同于把它们删掉<br>6)nil 作比较时应该加上双引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7)字符串和数字运算</span><br><span class="line">一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字</span><br><span class="line">8)字符串连接</span><br><span class="line">```  </span><br><span class="line">print(&quot;a&quot; .. &apos;b&apos;)  tonumber(字符串)  -- tostring(bVar)</span><br></pre></td></tr></table></figure><p>9)字符串长度<br>使用 # 来计算字符串的长度，放在字符串前面</p><p>10)table类型-数组、哈希、包、类- 都可以通过table实现</p><blockquote><ul><li>1、不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始</li><li>2、”关联数组”（associative arrays），数组的索引可以是数字或者是字符串。</li><li>3、table 不会固定长度大小，有新数据添加时 table 长度会自动增长，没初始的 table 都是 nil</li><li>4、对 table 的索引使用方括号 []。Lua 也提供了 . 操作</li><li>Lua table 是不固定大小的，你可以根据自己需要进行扩容<br>Lua也是通过table来解决模块（module）、包（package）和对象（Object）的。 例如string.format表示使用”format”来索引table string</li></ul></blockquote><p>11)table类型是否为nil变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function isTableEmpty(t)</span><br><span class="line">    if t == nil or _G.next(t) == nil then</span><br><span class="line">        return true</span><br><span class="line">    else</span><br><span class="line">        return false</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>12)全局变量和局部变量<br>a = 5  – 全局变量<br>local b = 5         – 局部变量</p><p>13)Lua 可以对多个变量同时赋值<br>Lua 可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量</p><p>14)循环</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( <span class="literal">true</span> )</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"循环将永远执行下去"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"0 为 true"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab1) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k .. <span class="string">" - "</span> .. v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>15)函数</p><blockquote><ul><li>Lua函数可以返回多个结果值，比如string.find，其返回匹配串”开始和结束的下标”（如果不存在匹配串返回nil）。</li><li>Lua 函数可以接受可变数目的参数，和 C 语言类似，在函数参数列表中使用三点 … 表示函数有可变的参数</li><li>我们也可以通过 select(“#”,…) 来获取可变参数的数量</li><li>有时候我们可能需要几个固定参数加上可变参数，固定参数必须放在变长参数之前</li><li>通常在遍历变长参数的时候只需要使用 {…}，然而变长参数可能会包含一些 nil，那么就可以用 select 函数来访问变长参数了：select(‘#’, …) 或者 select(n, …)<br>select(‘#’, …) 返回可变参数的长度<br>select(n, …) 用于访问 n 到 select(‘#’,…) 的参数</li></ul></blockquote><h2 id="5-Lua在nginx中的使用"><a href="#5-Lua在nginx中的使用" class="headerlink" title="5.Lua在nginx中的使用"></a>5.Lua在nginx中的使用</h2><p>一、<a href="https://github.com/openresty/lua-nginx-module#directives" target="_blank" rel="noopener">阶段执行流程</a><br>二、<a href="https://github.com/openresty/lua-nginx-module#nginx-api-for-lua" target="_blank" rel="noopener">Nginx API for Lua</a></p><p>三、常用阶段</p><blockquote><ul><li>content_by_lua 是内容处理器，接受请求并输出响应，适用于location、location if。 </li><li>access_by_lua 在请求访问阶段处理，用于访问控制，适用于http、server、location、location if。</li><li>rewrite_by_lua 测试只有在重定向的时候才会调用 </li><li>set_by_lua</li><li>set_by_lua_file执行Nginx外部的lua脚本，可以避免在配置文件中使用大量的转义</li></ul></blockquote><p>四、使用实例1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">rewrite_by_lua &apos;</span><br><span class="line">local res = ngx.location.capture(&quot;/check-spam&quot;)</span><br><span class="line">if res.body == &quot;spam&quot; then</span><br><span class="line">ngx.redirect(&quot;/terms-of-use.html&quot;)</span><br><span class="line">end</span><br><span class="line">&apos;; fastcgi_pass ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /echo &#123;</span><br><span class="line">default_type text/plain;</span><br><span class="line">echo hello lua;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /lua &#123;</span><br><span class="line">default_type text/plain;</span><br><span class="line">content_by_lua &apos;ngx.say(&quot;hello world&quot;)&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五、使用实例2-ip禁止功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">location @client&#123;</span><br><span class="line">proxy_pass  http://www.baidu.com;</span><br><span class="line">&#125;</span><br><span class="line">location ~  /test &#123;</span><br><span class="line">default_type  text/html;</span><br><span class="line">content_by_lua &apos;ngx.say(&quot;this is  ruifengyun.com!&quot;)&apos;;</span><br><span class="line">access_by_lua &apos;</span><br><span class="line">if ngx.var.remote_addr == &quot;101.2.20.110&quot; then</span><br><span class="line">ngx.exit(ngx.HTTP_FORBIDDEN)</span><br><span class="line">end</span><br><span class="line">if ngx.var.remote_addr == &quot;101.21.20.112&quot; then</span><br><span class="line">ngx.exec(&quot;@client&quot;)</span><br><span class="line">end</span><br><span class="line">&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>六、重定向转发-获取重定向的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">location /foo &#123;</span><br><span class="line"> content_by_lua_block &#123;</span><br><span class="line">     ngx.exec(&quot;/bar&quot;, &quot;a=goodbye&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location /bar &#123;</span><br><span class="line"> default_type text/plain;</span><br><span class="line"> content_by_lua_block &#123;</span><br><span class="line">     local args = ngx.req.get_uri_args()</span><br><span class="line">     for key, val in pairs(args) do</span><br><span class="line"> if key == &quot;a&quot; then</span><br><span class="line">     ngx.say(val)</span><br><span class="line"> end</span><br><span class="line">     end</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>七、nginx定义的变量 lua中可以获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location /foo &#123;</span><br><span class="line">    set $my_var &apos;&apos;; # this line is required to create $my_var at config time ngx.arg[1]可以获取定义的参数</span><br><span class="line">    content_by_lua_block &#123;</span><br><span class="line">        ngx.var.my_var = 123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">删除变量方法：ngx.var.args = nil如：ngx.var.name = nil 删除nginx中name的变量</span><br></pre></td></tr></table></figure><p>八、ngx.ctx-一个生命周期中共享变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location /test &#123;</span><br><span class="line">    rewrite_by_lua_block &#123;</span><br><span class="line">        ngx.ctx.foo = 76</span><br><span class="line">    &#125;</span><br><span class="line">    access_by_lua_block &#123;</span><br><span class="line">        ngx.ctx.foo = ngx.ctx.foo + 3</span><br><span class="line">    &#125;</span><br><span class="line">    content_by_lua_block &#123;</span><br><span class="line">        ngx.say(ngx.ctx.foo)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>九 几个常用的api地址</p><blockquote><ul><li>[方法常量](<a href="https://github.com/openresty/lua-nginx-module" target="_blank" rel="noopener">https://github.com/openresty/lua-nginx-module</a>* #http-method-constants)</li><li><a href="https://github.com/openresty/lua-nginx-module#http-status-constants" target="_blank" rel="noopener">状态常量</a></li><li><a href="https://github.com/openresty/lua-nginx-module#nginx-log-level-constants" target="_blank" rel="noopener">日志级别常量</a></li><li><a href="https://github.com/openresty/lua-nginx-module#ngxheaderheader" target="_blank" rel="noopener">nginx头处理</a></li><li><a href="https://github.com/openresty/lua-nginx-module#ngxreqset_uri" target="_blank" rel="noopener">重定向</a></li></ul></blockquote><p>十、常用API记载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> ngx.req.set_uri</span><br><span class="line"> ngx.req.set_uri(&quot;/foo&quot;, true)</span><br><span class="line">ngx.req.get_uri_args</span><br><span class="line">ngx.req.set_uri_args</span><br><span class="line">local args, err = ngx.req.get_post_args()</span><br><span class="line">ngx.req.get_headers</span><br><span class="line">ngx.req.set_header</span><br><span class="line">ngx.req.clear_header</span><br><span class="line">ngx.req.read_body</span><br><span class="line">ngx.req.get_body_file</span><br><span class="line"></span><br><span class="line">ngx.req.set_body_data</span><br><span class="line"></span><br><span class="line">ngx.redirect</span><br><span class="line">ngx.print 没有回车 </span><br><span class="line">ngx.say 有回车 </span><br><span class="line"></span><br><span class="line">ngx.flush</span><br><span class="line">ngx.exit(501) 返回状态吗，并直接退出 </span><br><span class="line">ngx.sleep</span><br><span class="line">ngx.today</span><br><span class="line">ngx.time</span><br><span class="line">ngx.now</span><br><span class="line">ngx.update_time</span><br><span class="line">ngx.utctime</span><br><span class="line">ngx.re.match</span><br><span class="line">ngx.re.find</span><br><span class="line">ngx.re.gmatch</span><br><span class="line">ngx.re.sub</span><br><span class="line">ngx.re.gsub</span><br><span class="line">ngx.shared.DICT</span><br><span class="line">local ok, err = ngx.timer.at(2, mylog ) 延时器，只会执行一次 </span><br><span class="line"></span><br><span class="line">--写响应头  </span><br><span class="line">ngx.header.a = &quot;1&quot;  </span><br><span class="line">--多个响应头可以使用table  </span><br><span class="line">ngx.header.b = &#123;&quot;2&quot;, &quot;3&quot;&#125;  </span><br><span class="line">--输出响应  </span><br><span class="line">ngx.say(&quot;a&quot;, &quot;b&quot;, &quot;&lt;br/&gt;&quot;)  </span><br><span class="line">ngx.print(&quot;c&quot;, &quot;d&quot;, &quot;&lt;br/&gt;&quot;)  </span><br><span class="line">--200状态码退出  </span><br><span class="line">return ngx.exit(200)  </span><br><span class="line"></span><br><span class="line">必须调用exit给出状态码</span><br><span class="line">ngx.say(&quot;api is offline!&quot;)</span><br><span class="line">ngx.exit(200)</span><br><span class="line"></span><br><span class="line">获取消息体，先打开获取消息体的开关：</span><br><span class="line">ngx.req.read_body()</span><br><span class="line">local data = ngx.req.get_body_data()</span><br><span class="line"></span><br><span class="line">local request_uri = ngx.var.request_uri or &quot;&quot;</span><br><span class="line">resty.iputils 工具类使用：https://github.com/hamishforbes/lua-resty-iputils</span><br></pre></td></tr></table></figure><h2 id="6-主要参考"><a href="#6-主要参考" class="headerlink" title="6.主要参考"></a>6.主要参考</h2><ul><li>1) <a href="http://www.lua.org/about.html" target="_blank" rel="noopener">Lua官网</a></li><li>2) <a href="https://luajit.org/" target="_blank" rel="noopener">luajit官网</a></li><li>3）<a href="https://openresty.org/cn/" target="_blank" rel="noopener">openresty</a></li><li>4）<a href="https://github.com/openresty/lua-nginx-module" target="_blank" rel="noopener">lua-nginx-module</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#LUA语言简介&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-什么是Lua语言&quot;&gt;&lt;a href=&quot;#1-什么是Lua语言&quot; class=&quot;headerlink&quot; title=&quot;1.什么是Lua语言&quot;&gt;&lt;/a&gt;1.什么是Lua语言&lt;/h2&gt;&lt;p&gt;  Lua是一种强大，高效，轻量级
      
    
    </summary>
    
      <category term="Lua" scheme="https://tonywang1.github.io/categories/Lua/"/>
    
    
      <category term="Lua" scheme="https://tonywang1.github.io/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL使用基础记录</title>
    <link href="https://tonywang1.github.io/2019/11/22/mysql_basic/"/>
    <id>https://tonywang1.github.io/2019/11/22/mysql_basic/</id>
    <published>2019-11-21T19:31:12.000Z</published>
    <updated>2019-11-21T12:04:40.083Z</updated>
    
    <content type="html"><![CDATA[<p>#MYSQL使用基础记录</p><hr><h2 id="1-变量的定义"><a href="#1-变量的定义" class="headerlink" title="1.变量的定义"></a>1.变量的定义</h2><blockquote><ul><li>第一种用法：set @num=1; 或set @num:=1; //这里要使用变量来保存数据，直接使用@num变量</li><li>第二种用法：select @num:=1; 或 select @num:=字段名 from 表名 where ……</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实例如：</span><br><span class="line">1）set @t_error=0; select @t_error ;</span><br><span class="line">2）select @num:=`name`  from   sys_area  where id=2  ; select @num;</span><br></pre></td></tr></table></figure><h2 id="2-启动事务和提交事务-回滚事务，"><a href="#2-启动事务和提交事务-回滚事务，" class="headerlink" title="2.启动事务和提交事务,回滚事务，"></a>2.启动事务和提交事务,回滚事务，</h2><p>如果打算启动事务则，设置自动提交为0，start transaction ; commit; </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数值1自动提交 0手动提交</span></span><br><span class="line"><span class="keyword">select</span> @@autocommit;  </span><br><span class="line"><span class="comment">#设置手动提交</span></span><br><span class="line"><span class="keyword">set</span> @@autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dic(<span class="keyword">name</span> ) <span class="keyword">values</span>(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dic(<span class="keyword">name</span> ) <span class="keyword">values</span>(<span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h2 id="3-数据库的四个特性"><a href="#3-数据库的四个特性" class="headerlink" title="3.数据库的四个特性"></a>3.数据库的四个特性</h2><p>特性：原子性，一致性，隔离性，持久性.<br>其中隔离性是不同事务之间的隔离原则，需要设置事务隔离级别来处理。</p><h2 id="4-事务的隔离级别"><a href="#4-事务的隔离级别" class="headerlink" title="4.事务的隔离级别"></a>4.事务的隔离级别</h2><pre><code> 1、 Read Uncommitted（读取未提交内容-未提交读）2、 Read Committed（读取提交内容-提交读） 3、Repeatable Read（可重读） 4、 Serializable（可串行化） </code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1）查看当前会话隔离级别</span><br><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br><span class="line">2）查看系统当前隔离级别</span><br><span class="line"><span class="keyword">select</span> @@global.tx_isolation;</span><br><span class="line">3）设置当前会话隔离级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> isolatin <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br><span class="line">4）设置系统当前隔离级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> repeatable <span class="keyword">read</span>;</span><br></pre></td></tr></table></figure><h2 id="5-数据库的共享锁和排它锁"><a href="#5-数据库的共享锁和排它锁" class="headerlink" title="5.数据库的共享锁和排它锁"></a>5.数据库的共享锁和排它锁</h2><p>查询当前有多少事务，多少锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.INNODB_TRX ;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.INNODB_LOCKS;</span><br></pre></td></tr></table></figure><ul><li>共享锁和排它锁不同点在于是否允许另一个事务读取被锁住的数据</li><li>共享锁锁住了一条id=1的数据，则其他的事务是可以读取，但不能更改</li><li>排它锁锁住了一条id=1的数据，其他的事务不可以读取，也不能更改，直到这个事务完成</li><li>如果另一个查询没有显示添加锁，则他是可以读取数据，不受上面锁影响 </li></ul><p><strong><em>举个栗子：</em></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@autocommit;  </span><br><span class="line"><span class="comment">#设置手动提交</span></span><br><span class="line"><span class="keyword">set</span> @@autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> @t_error=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> @t_error ;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span> ;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dic <span class="keyword">for</span> <span class="keyword">update</span> ;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dic(<span class="keyword">name</span> ) <span class="keyword">values</span>(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dic(<span class="keyword">name</span> ) <span class="keyword">values</span>(<span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h2 id="6-外键删除"><a href="#6-外键删除" class="headerlink" title="6.外键删除"></a>6.外键删除</h2><p>外键不能直接删除，必须先删除外键然后删除相应的索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看表的外键以及外键名称</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span>  表名</span><br><span class="line"><span class="comment">#删除外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名  <span class="keyword">drop</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> 外键名称  ;</span><br><span class="line"><span class="comment">#显示所有的索引，并且删除需要删除的索引</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span>  表名称 ;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>  表名称 <span class="keyword">drop</span>  <span class="keyword">index</span>  FK_cv98jak9 ;</span><br></pre></td></tr></table></figure><h2 id="7-字段删除和添加"><a href="#7-字段删除和添加" class="headerlink" title="7.字段删除和添加"></a>7.字段删除和添加</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table   表名  drop column    cluster_num</span><br><span class="line">alter table   表名  add cluster_num int comment &apos;数量&apos;;</span><br></pre></td></tr></table></figure><h2 id="8-NULL问题"><a href="#8-NULL问题" class="headerlink" title="8.NULL问题"></a>8.NULL问题</h2><pre><code>SELECT 1 = NULL, 1 &lt;&gt; NULL, 1 &lt; NULL, 1 &gt; NULL;</code></pre><h2 id="9-显示执行的进程"><a href="#9-显示执行的进程" class="headerlink" title="9. 显示执行的进程"></a>9. 显示执行的进程</h2><p>show  full  processlist （状态字段的意思）<br>或者（select * from  information_schema.processlist where  host like ‘%10.18.2.65%’）</p><ul><li><p>Sleep<br>通常代表资源未释放，如果是通过连接池，sleep状态应该恒定在一定数量范围内<br>（一般连接池会有一个参数initialSize，如果initialSize=10则初始化的时候会有10个状态为sleep连接被建立，并且一直存在），<br>例如：<br>数据查询时间为0.1秒，而网络输出需要1秒左右，原本数据连接在0.1秒即可释放，但是因为前端程序未执行close操作，<br>直接输出结果，那么在结果未展现在用户桌面前，该数据库连接一直维持在sleep状态</p></li><li><p>Locked<br>操作被锁定，通常使用innodb可以很好的减少locked状态的产生</p></li><li><p>Copy to tmp table<br>索引及现有结构无法涵盖查询条件时，会建立一个临时表来满足查询要求，产生巨大的i/o压力Copy to tmp table通常与连表查询有关，<br>建议减少关联查询或者深入优化查询语句，如果出现此状态的语句执行时间过长，会严重影响其他操作，此时可以kill掉该操作</p></li><li><p>Sending data<br>Sending data并不是发送数据，是从物理磁盘获取数据的进程，如果你的影响结果集较多，那么就需要从不同的磁盘碎片去抽取数据，<br>如果sending data连接过多，通常是某查询的影响结果集过大，也就是查询的索引项不够优化</p></li><li><p>Storing result to query cache<br>如果频繁出现此状态，使用set profiling、“SHOW PROFILE” 分析，如果存在资源开销在SQL整体开销的比例过大（即便是非常小的开销，看比例），<br>则说明query cache碎片较多，使用flush query cache可即时清理，Query cache参数可适当酌情设置</p></li></ul><hr><p>1 开启profiling功能：set profiling=1;<br>2 显示所有记录的profile：show profiles;<br>3 详细输出某个profile的记录：show profile cpu ,block io for query n(profile的id)</p><hr><h2 id="10-mysql日期时间函数的处理"><a href="#10-mysql日期时间函数的处理" class="headerlink" title="10.mysql日期时间函数的处理"></a>10.mysql日期时间函数的处理</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">date_format(date, format) 函数，MySQL日期格式化函数date_format()</span><br><span class="line">unix_timestamp( 时间日期) 函数 ，Mysql日期转换为unix时间戳</span><br><span class="line">str_to_date(str, format) 函数 ，字符串转化日期</span><br><span class="line">from_unixtime(unix_timestamp, format) 函数，MySQL时间戳格式化函数from_unixtime</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">now</span>(),<span class="string">'%Y-%m-%d'</span> ) </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">str_to_date</span>(<span class="string">'2017-12-08 00:00:00'</span>, <span class="string">'%Y-%m-%d %H:%i:%s'</span> ) </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">unix_timestamp</span>( <span class="keyword">DATE_FORMAT</span>(<span class="keyword">now</span>(),<span class="string">'%Y-%m-%d'</span> )  )*<span class="number">1000</span>  ;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">unix_timestamp</span>( <span class="keyword">str_to_date</span>(<span class="string">'2017-12-08 00:00:00'</span>, <span class="string">'%Y-%m-%d %H:%i:%s'</span> )  )*<span class="number">1000</span> ;</span><br><span class="line"><span class="keyword">select</span> from_unixtime( <span class="keyword">unix_timestamp</span>( <span class="keyword">DATE_FORMAT</span>(<span class="keyword">now</span>(),<span class="string">'%Y-%m-%d'</span> )  ),<span class="string">'%Y-%m-%d %H:%i:%s'</span>  )  ;</span><br><span class="line">数据库中的时间错：FROM_UNIXTIME(left(a.created_at,10), '%Y-%m-%d %H:%i:%S')&gt;'2018-01-01 00:00:00' </span><br><span class="line"><span class="keyword">select</span> step_name,FROM_UNIXTIME(<span class="keyword">left</span>(a.start_time,<span class="number">10</span>), <span class="string">'%Y-%m-%d %H:%i:%S'</span>) 开始时间,</span><br><span class="line">FROM_UNIXTIME(<span class="keyword">left</span>(a.end_time,<span class="number">10</span>), <span class="string">'%Y-%m-%d %H:%i:%S'</span>)  结束时间</span><br><span class="line"><span class="keyword">from</span> task_step1 a</span><br></pre></td></tr></table></figure><h2 id="11-多表关联更新与删除"><a href="#11-多表关联更新与删除" class="headerlink" title="11.多表关联更新与删除"></a>11.多表关联更新与删除</h2><ul><li>关联更新一个表的数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update user a    join  user_ext b on a.uid=b.id  </span><br><span class="line">set  b.name=a.name, b.age=a.age</span><br><span class="line">where ifNULL(a.business_ip,&apos;&apos;)&lt;&gt;ifNULL(b.new_business_ip,&apos;&apos;)</span><br></pre></td></tr></table></figure></li></ul><ul><li>关联删除h表的数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete h.* </span><br><span class="line">from user  g   join user_ext h on g.id=h.userId</span><br><span class="line">where g.id=1</span><br></pre></td></tr></table></figure></li></ul><h2 id="12-in和exist的区别"><a href="#12-in和exist的区别" class="headerlink" title="12.in和exist的区别"></a>12.in和exist的区别</h2><p><a href="http://www.manongjc.com/article/981.html" target="_blank" rel="noopener">参照</a></p><h2 id="13-数据导出和导入"><a href="#13-数据导出和导入" class="headerlink" title="13.数据导出和导入"></a>13.数据导出和导入</h2><blockquote><ul><li>备份：mysqldump  数据库名称 -u’用户名’ -p &gt; 表名称.sql<br>mysqldump -u 用户名 -p ‘密码’ –host=远程服务器地址  数据库名称 &gt; 数据库名称1.sql</li><li>/usr/local/mysql/bin/mysqldump -q -h127.0.0.1 -udmin -p’密码’ -P3306  –single-transaction  –databases 数据库名称 &gt; /data/tmp/备份数据库名_20111019.sql</li></ul></blockquote><blockquote><ul><li>导入：mysql&gt; source /tmp/表名称.sql</li><li>登陆：mysql -h mysql远程地址 -u 用户名 -p’密码’</li></ul></blockquote><h2 id="14-数据库的common内容显示乱码：修改编码格式"><a href="#14-数据库的common内容显示乱码：修改编码格式" class="headerlink" title="14.数据库的common内容显示乱码：修改编码格式"></a>14.数据库的common内容显示乱码：修改编码格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;char%&apos;</span><br><span class="line">set character_set_connection=utf8 ;</span><br><span class="line">set character_set_results=utf8;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#MYSQL使用基础记录&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-变量的定义&quot;&gt;&lt;a href=&quot;#1-变量的定义&quot; class=&quot;headerlink&quot; title=&quot;1.变量的定义&quot;&gt;&lt;/a&gt;1.变量的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第一种用法：
      
    
    </summary>
    
      <category term="MYSQL" scheme="https://tonywang1.github.io/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="https://tonywang1.github.io/tags/MYSQL/"/>
    
      <category term="SQL" scheme="https://tonywang1.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>GO语言基础</title>
    <link href="https://tonywang1.github.io/2019/10/12/go_basic/"/>
    <id>https://tonywang1.github.io/2019/10/12/go_basic/</id>
    <published>2019-10-12T15:41:13.000Z</published>
    <updated>2019-11-18T12:41:51.748Z</updated>
    
    <content type="html"><![CDATA[<p>#GO语言简介<br>个人从学习从入手不到一周基本可以开始开发：<br>1 go语法基础看了一遍<br>2 经常用到的难点突破一下<br>3 beego网路开发官方文档主要的部分看一遍</p><hr><h2 id="1-什么是GO语言"><a href="#1-什么是GO语言" class="headerlink" title="1.什么是GO语言"></a>1.什么是GO语言</h2><p>Go（又称 Golang）是 Google 开源的一种静态强类型、编译型语言</p><h2 id="2-什么要用GO语言"><a href="#2-什么要用GO语言" class="headerlink" title="2.什么要用GO语言"></a>2.什么要用GO语言</h2><blockquote><ul><li>简单高效</li><li>开发速度快</li><li>容易开发并行性代码</li><li>部署简单</li></ul></blockquote><h2 id="3-GO如何安装"><a href="#3-GO如何安装" class="headerlink" title="3.GO如何安装"></a>3.GO如何安装</h2><ol><li>下载go-<a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a></li><li>安装并设置go的环境变量-go的bin目录添加的环境变量path中 ，C:\Go\bin</li><li>执行go version ，打印go的版本，安装完成 </li><li>go evn，打印go的所有相关变量</li></ol><h2 id="4-基础语法记录"><a href="#4-基础语法记录" class="headerlink" title="4.基础语法记录"></a>4.基础语法记录</h2><p><a href="https://www.runoob.com/go/go-tutorial.html" target="_blank" rel="noopener">基础语法学习参考</a></p><p>1) 指针、对象、值传递和引用传递</p><blockquote><ul><li>go普通变量:变量直接指向存在内存中的值</li><li>go指针变量**:变量指向值存储的地址，实际的内存地址</li><li>new(T) 返回 T 的指针 *T， 并指向 T 的零值。– 指针</li><li>make(T) 返回的初始化的 T的引用，只能用于 slice，map，channel。 - 引用</li><li>City{Id: id} == 返回对象引用</li><li>new(City)    == 返回对象指针</li><li>函数的参数两种：值传递（数值的拷贝）、引用传递（指针）</li></ul></blockquote><p>2) 类型转换</p><blockquote><ul><li>strconv - 字符串和各种数据类型的转换</li><li>整数之间转换<br>  整数之间强转：int := int(int32)</li><li>整数转为字符串：strconv.Itoa( ) </li><li>boolean转为字符串：strconv.FormatBool(isDebug) </li><li>字节与字符串的转换：<br>  var a = []byte(“hello boy”)<br>  var b = string(a)</li><li>strings:字符串的工具类</li></ul></blockquote><p>3) 命名规范</p><blockquote><ul><li>golang的命名推荐使用驼峰命名法，必须以一个字母（Unicode字母）或下划线开头，后面可以跟任意数量的字母、数字或下划线</li><li>golang中根据首字母的大小写来确定可以访问的权限。无论是方法名、常量、变量名还是结构体的名称，如果首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用<br>可以简单的理解成，首字母大写是公有的，首字母小写是私有的</li><li>结构体中属性名的大写-小写的json不能解析</li></ul></blockquote><p>4) json使用</p><blockquote><ul><li>类型断言:interface.(int)</li><li>反序列化，指定对应的struct，只有key的第一个字母大写才能被反序列化</li><li>序列化key必须是字符串，值为指针，则序列化为对应的值</li></ul></blockquote><p>5) simplejson使用<br>    simplejson：解析复杂json，解析时候最好从根部解析。<br>    参照：<a href="https://blog.csdn.net/chenghuan1990/article/details/75423325" target="_blank" rel="noopener">https://blog.csdn.net/chenghuan1990/article/details/75423325</a></p><p>6) struct tags修改json序列化和反序列化的对应</p><blockquote><ul><li>改变对应序列化和反序列化后的名称</li><li>指定空值得处理</li><li>是否忽略某个字段</li><li>类型判断：switch vv := v.(type) </li></ul></blockquote><p>7)io.Reader/Writer常用</p><blockquote><ul><li>字节缓冲区，字节、字符串、Reader之间的操作</li><li>net.Conn, os.Stdin, os.File: 网络、标准输入输出、文件的流读取</li><li>strings.Reader: 把字符串抽象成Reader</li><li>bytes.Reader: 把[]byte抽象成Reader</li><li>bytes.Buffer: 把[]byte抽象成Reader和Writer</li><li>bufio.Reader/Writer: 抽象成带缓冲的流读取（比如按行读写）</li></ul></blockquote><p>8) http使用</p><blockquote><ul><li>restclient: <a href="https://github.com/ylywyn/restclient" target="_blank" rel="noopener">https://github.com/ylywyn/restclient</a></li><li>标准库：http</li></ul></blockquote><h2 id="5-IDEA中开发GO项目"><a href="#5-IDEA中开发GO项目" class="headerlink" title="5.IDEA中开发GO项目"></a>5.IDEA中开发GO项目</h2><ul><li>1 设置GOROOT-项目相关的包都是从这个目录开始查找的</li><li>2 设置GOPATH-添加gopath到设置中</li><li>3 Setting的设置GoModule ，允许go module集成 ，设置Proxy=<a href="https://goproxy.cn" target="_blank" rel="noopener">https://goproxy.cn</a></li><li>4 生成依赖管理文件go.mod:  go mod init – 项目使用modules管理，并生成管理文件go.mod<br>每次build会将项目中的包信息，放到这个文件中<br>go mod download – 会将项目依赖包放到go安装目录的pkg目录中，所有项目共享<br>go.mod文件：为项目的依赖包，描述项目的名称和依赖的第三方的包<br>go.sum文件：为项目的依赖分析文件，记录每个依赖库的版本和哈希值</li><li>5 将依赖包生成到本地:  go mod vendor - 将依赖包放到项目中的vendor目录中，本项目独有，idea就可以识别了 </li><li>6 启动项目 ： bee run -gendoc=true -downdoc=true</li></ul><p><strong>注意：</strong></p><ul><li>1 项目要用go的module形式进行管理 go mod init</li><li>2 项目中引入的所有包进入到包管理文件： go build（会将包信息写到go.mod中）</li><li>3 下载对应的包到项目的vendor目录中：go mod vendor</li></ul><h2 id="6-主要参考"><a href="#6-主要参考" class="headerlink" title="6.主要参考"></a>6.主要参考</h2><ul><li>1) <a href="https://www.runoob.com/go/go-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/go/go-tutorial.html</a></li><li>2) <a href="https://beego.me/docs/install/bee.md" target="_blank" rel="noopener">beego官网</a></li><li>3）<a href="https://golang.google.cn/" target="_blank" rel="noopener">go官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#GO语言简介&lt;br&gt;个人从学习从入手不到一周基本可以开始开发：&lt;br&gt;1 go语法基础看了一遍&lt;br&gt;2 经常用到的难点突破一下&lt;br&gt;3 beego网路开发官方文档主要的部分看一遍&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-什么是GO语言&quot;&gt;&lt;a href=&quot;#1-什么是G
      
    
    </summary>
    
      <category term="GO" scheme="https://tonywang1.github.io/categories/GO/"/>
    
    
      <category term="GO" scheme="https://tonywang1.github.io/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>GO并发处理</title>
    <link href="https://tonywang1.github.io/2019/10/12/go_routine/"/>
    <id>https://tonywang1.github.io/2019/10/12/go_routine/</id>
    <published>2019-10-12T15:41:13.000Z</published>
    <updated>2019-11-22T06:20:43.951Z</updated>
    
    <content type="html"><![CDATA[<p>#GO并发处理</p><hr><h2 id="1-协程"><a href="#1-协程" class="headerlink" title="1.协程"></a>1.协程</h2><h2 id="2-channal"><a href="#2-channal" class="headerlink" title="2.channal"></a>2.channal</h2><ul><li><p>概念：一个channel可以理解为一个先进先出的消息队列，有长度和容量，类似一个数组</p></li><li><p>作用：channel用来在协程[goroutine]之前传递数据，准确的说，是用来传递数据的所有权</p></li><li><p>设计：一个设计良好的程序应该确保同一时刻channel里面的数据只会被同一个协程拥有，这样就可以避免并发带来的数据不安全问题</p></li><li><p>类型：</p><blockquote><ul><li>chan T是双向channel类型，编译器允许对双向channel同时进行发送和接收。</li><li>chan&lt;- T是只写channel类型，编译器只允许往channel里面发送数据。</li><li>&lt;-chan T是只读channel类型，编辑器只允许从channel里面接收数据。</li></ul></blockquote></li><li><p>定义：每一种channel类型都对应着一种简单的数据类型，进入这个channel的数据必须是这个数据类型<br>用法：</p></li><li><p>For-Range：for-range语法可以用到通道上。循环会一直接收channel里面的数据，直到channel关闭</p></li><li><p>channel阻塞：<br>接收方会一直阻塞直到有数据到来。如果channel是无缓冲的，发送方会一直阻塞直到接收方将数据取出。<br>如果channel带有缓冲区，发送方会一直阻塞直到数据被拷贝到缓冲区；如果缓冲区已满，则发送方只能在接收方取走数据后才能从阻塞状态恢复</p></li></ul><h2 id="3-select-关键字"><a href="#3-select-关键字" class="headerlink" title="3.select 关键字"></a>3.select 关键字</h2><p><a href="https://www.jianshu.com/p/2a1146dc42c3" target="_blank" rel="noopener">参考</a></p><h4 id="1-执行原理："><a href="#1-执行原理：" class="headerlink" title="1) 执行原理："></a>1) 执行原理：</h4><blockquote><ul><li>如果有一个或多个IO操作可以完成，则Go运行时系统会随机的选择一个执行，</li><li>否则的话，如果有default分支，则执行default分支语句，</li><li>如果连default都没有，则select语句会一直阻塞，直到至少有一个IO操作可以进行</li></ul></blockquote><h4 id="2-select基本用法"><a href="#2-select基本用法" class="headerlink" title="2) select基本用法"></a>2) select基本用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select &#123;</span><br><span class="line">case &lt;- chan1:</span><br><span class="line">// 如果chan1成功读到数据，则进行该case处理语句</span><br><span class="line">case chan2 &lt;- 1:</span><br><span class="line">// 如果成功向chan2写入数据，则进行该case处理语句</span><br><span class="line">default:</span><br><span class="line">// 如果上面都没有成功，则进入default处理流程</span><br></pre></td></tr></table></figure><h4 id="3-作用"><a href="#3-作用" class="headerlink" title="3)作用"></a>3)作用</h4><p>select就是用来监听和channel有关的IO操作，当 IO 操作发生时，触发相应的动作</p><h4 id="4-select中的break"><a href="#4-select中的break" class="headerlink" title="4) select中的break"></a>4) select中的break</h4><p>可以中途终止case中的操作</p><h4 id="5-阻塞流程-无default"><a href="#5-阻塞流程-无default" class="headerlink" title="5)阻塞流程-无default"></a>5)阻塞流程-<strong><em>无default</em></strong></h4><p>如果没有default时，而且所有的case中的channal都没有接收到成功操作，则协程阻塞，这个可以控制协程处理流程</p><h2 id="4-定时器NewTimer、NewTicker"><a href="#4-定时器NewTimer、NewTicker" class="headerlink" title="4.定时器NewTimer、NewTicker"></a>4.定时器NewTimer、NewTicker</h2><ul><li>NewTimer 设定一个时间间隔，到设定时间则会将当前时间传到channal中</li><li>NewTicker 设定一个时间间隔，每隔设定时间间隔则将当前时间传到channal中</li></ul><p><strong><em>使用</em></strong>：定时器中如果时间到达与设定时间，则对应的channal会返回当时的时间，如果需要执行自定义函数需要，利用channal阻塞等待数据返回的特性实现定时器功能，执行自定义功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTimer</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//初始化定时器</span></span><br><span class="line">t := time.NewTimer(<span class="number">5</span> * time.Second)</span><br><span class="line"><span class="comment">//当前时间</span></span><br><span class="line">now := time.Now()</span><br><span class="line">fmt.Printf(<span class="string">"Now time : %v.\n"</span>, now)</span><br><span class="line"><span class="keyword">for</span>  &#123;</span><br><span class="line"><span class="comment">//使用 channel阻塞特性，实现定时器 定时返回值 的功能</span></span><br><span class="line">expire := &lt;- t.C</span><br><span class="line">fmt.Printf(<span class="string">"Expiration time: %v.\n"</span>, expire)</span><br><span class="line"><span class="comment">//重置定时间时间，重新计数</span></span><br><span class="line">t.Reset( <span class="number">3</span>*time.Second )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">func TestTicker()&#123;</span><br><span class="line">//初始化定时器</span><br><span class="line">t := time.NewTicker(1 * time.Second)</span><br><span class="line">//当前时间</span><br><span class="line">now := time.Now()</span><br><span class="line">fmt.Printf(&quot;Now time is : %v.\n&quot;, now)</span><br><span class="line">i:=0</span><br><span class="line">for  &#123;</span><br><span class="line">//使用 channel阻塞特性，实现定时器 定时返回值 的功能</span><br><span class="line">expire := &lt;- t.C</span><br><span class="line">fmt.Printf(&quot;Expiration time is : %v.\n&quot;, expire)</span><br><span class="line">i++</span><br><span class="line">if i==4&#123;</span><br><span class="line">//结束的时候调用关闭</span><br><span class="line">t.Stop()</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-WaitGroup"><a href="#5-WaitGroup" class="headerlink" title="5.WaitGroup"></a>5.WaitGroup</h2><p>控制多个goroutine同时完成</p><h2 id="6-协程退出处理"><a href="#6-协程退出处理" class="headerlink" title="6.协程退出处理"></a>6.协程退出处理</h2><ul><li>chan通知退出、</li><li>WithTimeout 超时自动取消方法、</li><li>WithCancel 手动取消方法：</li></ul><p><strong>退出最终都是通过channel通知了channel来结束协程的</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#GO并发处理&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-协程&quot;&gt;&lt;a href=&quot;#1-协程&quot; class=&quot;headerlink&quot; title=&quot;1.协程&quot;&gt;&lt;/a&gt;1.协程&lt;/h2&gt;&lt;h2 id=&quot;2-channal&quot;&gt;&lt;a href=&quot;#2-channal&quot; class
      
    
    </summary>
    
      <category term="GO" scheme="https://tonywang1.github.io/categories/GO/"/>
    
    
      <category term="GO" scheme="https://tonywang1.github.io/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>protobuf使用</title>
    <link href="https://tonywang1.github.io/2019/10/12/you_know_pb/"/>
    <id>https://tonywang1.github.io/2019/10/12/you_know_pb/</id>
    <published>2019-10-12T15:41:13.000Z</published>
    <updated>2019-10-12T07:46:28.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Protocol-Buffer初识"><a href="#Protocol-Buffer初识" class="headerlink" title="Protocol Buffer初识"></a>Protocol Buffer初识</h1><hr><h2 id="1-什么是protobuf"><a href="#1-什么是protobuf" class="headerlink" title="1.什么是protobuf"></a>1.什么是protobuf</h2><p>google开发的跨语言、跨平台、可扩展的可以序列化的数据结构，像XML一样，但是更小更快，更简单，你可以定义序列化的数据结构，然后用工具生成对应语言的源码，最后可以用各种语言对数据流结构进行读写。</p><h2 id="2-protobuf优势在哪里"><a href="#2-protobuf优势在哪里" class="headerlink" title="2.protobuf优势在哪里"></a>2.protobuf优势在哪里</h2><ul><li>跨语言</li><li>跨平台</li><li>可扩展</li><li>小、快、简单</li></ul><h2 id="3-什么地方使用protobuf"><a href="#3-什么地方使用protobuf" class="headerlink" title="3.什么地方使用protobuf"></a>3.什么地方使用protobuf</h2><ul><li>数据压缩传输</li><li>数据压缩存储、持久化</li></ul><h2 id="4-在java中如何使用protobuf-maven插件可以直接生成java代码"><a href="#4-在java中如何使用protobuf-maven插件可以直接生成java代码" class="headerlink" title="4.在java中如何使用protobuf-maven插件可以直接生成java代码"></a>4.在java中如何使用protobuf-maven插件可以直接生成java代码</h2><ol><li>创建proto目录，并在里面创建bookdress.proto文件-内容如<strong>代码4.1</strong></li><li>maven的xml中添加protobuf文件生成源码的代码-内容如<strong>4.2</strong></li><li>测试写入protobuf的<strong>代码4.3</strong></li><li>测试读取protobuf的<strong>代码4.4</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">代码<span class="number">4.1</span></span><br><span class="line">syntax = <span class="string">"proto2"</span>;</span><br><span class="line"><span class="keyword">package</span> proto;</span><br><span class="line">option java_package = <span class="string">"com.test.proto"</span>;</span><br><span class="line">option java_outer_classname = <span class="string">"AddressBookProtos"</span>;</span><br><span class="line">message Person &#123;</span><br><span class="line">    optional string name = <span class="number">1</span>;</span><br><span class="line">    optional int32 id = <span class="number">2</span>;</span><br><span class="line">    optional string email = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">enum</span> PhoneType &#123;</span><br><span class="line">        MOBILE = <span class="number">0</span>;</span><br><span class="line">        HOME = <span class="number">1</span>;</span><br><span class="line">        WORK = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    message PhoneNumber &#123;</span><br><span class="line">        optional string number = <span class="number">1</span>;</span><br><span class="line">        optional PhoneType type = <span class="number">2</span> [<span class="keyword">default</span> = HOME];</span><br><span class="line">    &#125;</span><br><span class="line">    repeated PhoneNumber phones = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">message AddressBook &#123;</span><br><span class="line">    repeated Person people = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">代码4.2</span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kr.motd.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>os-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xolstice.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">protocArtifact</span>&gt;</span>com.google.protobuf:protoc:3.4.0:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">protocArtifact</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">代码<span class="number">4.3</span></span><br><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">import</span> com.test.proto.AddressBookProtos;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WritePerson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  String addr_book = <span class="string">"addr_book.file"</span>; <span class="comment">// 写入文件的名称</span></span><br><span class="line">    <span class="keyword">static</span> AddressBookProtos.<span class="function">Person <span class="title">PromptForAddress</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        AddressBookProtos.Person.Builder person = AddressBookProtos.Person.newBuilder();</span><br><span class="line">        person.setId(index);</span><br><span class="line">        person.setName(<span class="string">"proto test "</span> + index);</span><br><span class="line">        person.setEmail(<span class="string">"a"</span>+index+<span class="string">"@b.com"</span>);</span><br><span class="line">        AddressBookProtos.Person.PhoneNumber.Builder phoneNumber = AddressBookProtos.Person.PhoneNumber.newBuilder().setNumber(<span class="string">"110-"</span>+index);</span><br><span class="line">        phoneNumber.setType(AddressBookProtos.Person.PhoneType.HOME);</span><br><span class="line">        person.addPhones(phoneNumber);</span><br><span class="line">        <span class="keyword">return</span> person.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AddressBookProtos.AddressBook.Builder addressBook = AddressBookProtos.AddressBook.newBuilder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            addressBook.mergeFrom(<span class="keyword">new</span> FileInputStream(addr_book));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.err.println( <span class="string">" File not found.  Creating a new file."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建 address.</span></span><br><span class="line">        addressBook.addPeople(PromptForAddress(<span class="number">1</span>));</span><br><span class="line">        addressBook.addPeople(PromptForAddress(<span class="number">2</span>));</span><br><span class="line">        addressBook.addPeople(PromptForAddress(<span class="number">3</span>));</span><br><span class="line">        <span class="comment">// 保存到文件</span></span><br><span class="line">        FileOutputStream output = <span class="keyword">new</span> FileOutputStream(WritePerson.addr_book);</span><br><span class="line">        addressBook.build().writeTo(output);</span><br><span class="line">        output.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">代码<span class="number">4.4</span></span><br><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">import</span> com.test.proto.AddressBookProtos;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadPeople</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(AddressBookProtos.AddressBook addressBook)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (AddressBookProtos.Person person : addressBook.getPeopleList()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Person ID: "</span> + person.getId());</span><br><span class="line">            System.out.println(<span class="string">"  Name: "</span> + person.getName());</span><br><span class="line">            <span class="keyword">if</span> (person.hasEmail()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"  E-mail address: "</span> + person.getEmail());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (AddressBookProtos.Person.PhoneNumber phoneNumber : person.getPhonesList()) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (phoneNumber.getType()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> MOBILE:</span><br><span class="line">                        System.out.print(<span class="string">"  Mobile phone #: "</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> HOME:</span><br><span class="line">                        System.out.print(<span class="string">"  Home phone #: "</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> WORK:</span><br><span class="line">                        System.out.print(<span class="string">"  Work phone #: "</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">               System.out.println(phoneNumber.getNumber());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AddressBookProtos.AddressBook addressBook = AddressBookProtos.AddressBook.parseFrom(<span class="keyword">new</span> FileInputStream(WritePerson.addr_book));</span><br><span class="line">        Print(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-主要参考"><a href="#5-主要参考" class="headerlink" title="5.主要参考"></a>5.主要参考</h2><ul><li><a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener">ProtoBuf的官方</a></li><li><a href="https://www.xolstice.org/protobuf-maven-plugin/examples/protoc-artifact.html" target="_blank" rel="noopener">ProtoBuf的maven集成插件</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noopener">google开发者文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Protocol-Buffer初识&quot;&gt;&lt;a href=&quot;#Protocol-Buffer初识&quot; class=&quot;headerlink&quot; title=&quot;Protocol Buffer初识&quot;&gt;&lt;/a&gt;Protocol Buffer初识&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="GRPC" scheme="https://tonywang1.github.io/categories/GRPC/"/>
    
    
      <category term="GRPC" scheme="https://tonywang1.github.io/tags/GRPC/"/>
    
  </entry>
  
  <entry>
    <title>GRPC使用</title>
    <link href="https://tonywang1.github.io/2019/10/12/you_know_grpc/"/>
    <id>https://tonywang1.github.io/2019/10/12/you_know_grpc/</id>
    <published>2019-10-12T15:41:13.000Z</published>
    <updated>2019-11-18T10:00:29.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GRPC初识"><a href="#GRPC初识" class="headerlink" title="GRPC初识"></a>GRPC初识</h1><hr><h2 id="1-什么是GRPC"><a href="#1-什么是GRPC" class="headerlink" title="1.什么是GRPC"></a>1.什么是GRPC</h2><p>GRPC是谷歌开源的高性能，跨语言的RPC框架，基于http2协议，交换描述语言为protobuf </p><h2 id="2-GRPC描述与说明"><a href="#2-GRPC描述与说明" class="headerlink" title="2.GRPC描述与说明"></a>2.GRPC描述与说明</h2><p>  GRPC的客户端可以直接调用服务端的方法，在任何的机器上，就像调用本地方法一样，因此利用GRPC可以更加方便的创建分布式的应用和服务。<br> GRPC需要定义一个服务，并说明服务的方法和返回值，然后Server方实现这个接口并运行GRPC服务去处理客户端的调用，客户端可以使用stub去调用服务端的接口（方法是一样的）</p><h2 id="3-什么地方适合用GBPC"><a href="#3-什么地方适合用GBPC" class="headerlink" title="3.什么地方适合用GBPC"></a>3.什么地方适合用GBPC</h2><ul><li>低延时、高可用的分布式系统；</li><li>移动端与云服务端的通讯；</li><li>使用protobuf，独立于语言的协议，支持多语言之间的通讯；</li><li>可以分层扩展，如：身份验证，负载均衡，日志记录，监控等。</li><li>服务端通信用的比较多</li></ul><h2 id="4-在java中如何使用GBPC"><a href="#4-在java中如何使用GBPC" class="headerlink" title="4.在java中如何使用GBPC"></a>4.在java中如何使用GBPC</h2><blockquote><ol><li>使用protobuf定义接口,即proto描述文件</li><li>使用maven的编译插件编译proto文件，生成对应的java文件</li><li>启动Server端，监听指定的端口</li><li>启动一个或者多个Client，去调用服务端暴露的接口</li></ol></blockquote><h2 id="5-示例代码"><a href="#5-示例代码" class="headerlink" title="5.示例代码"></a>5.示例代码</h2><p><a href="https://github.com/tonywang1/test.git" target="_blank" rel="noopener">实例代码</a><br><a href="https://github.com/tonywang1/test.git" target="_blank" rel="noopener">spring集成GRPC实例代码</a><br><em>注意启动项目的时候需要修改spring-boot-starter-grpc对应的版本为对应模块的版本</em></p><h2 id="6-主要参考"><a href="#6-主要参考" class="headerlink" title="6.主要参考"></a>6.主要参考</h2><ul><li><a href="https://github.com/grpc/grpc/blob/master/README.md" target="_blank" rel="noopener">GRPC代码库</a></li><li><a href="https://grpc.io/docs/tutorials/basic/java/" target="_blank" rel="noopener">GRPC文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GRPC初识&quot;&gt;&lt;a href=&quot;#GRPC初识&quot; class=&quot;headerlink&quot; title=&quot;GRPC初识&quot;&gt;&lt;/a&gt;GRPC初识&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-什么是GRPC&quot;&gt;&lt;a href=&quot;#1-什么是GRPC&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="GRPC" scheme="https://tonywang1.github.io/categories/GRPC/"/>
    
    
      <category term="GRPC" scheme="https://tonywang1.github.io/tags/GRPC/"/>
    
  </entry>
  
  <entry>
    <title>JAVA时间总结</title>
    <link href="https://tonywang1.github.io/2019/09/18/java_date/"/>
    <id>https://tonywang1.github.io/2019/09/18/java_date/</id>
    <published>2019-09-17T20:28:36.000Z</published>
    <updated>2019-09-24T09:55:00.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA时间总结"><a href="#JAVA时间总结" class="headerlink" title="JAVA时间总结"></a>JAVA时间总结</h1><hr><h2 id="1-UTC-世界标准时间"><a href="#1-UTC-世界标准时间" class="headerlink" title="1.UTC(世界标准时间)"></a>1.UTC(世界标准时间)</h2><p>什么是utc时间</p><blockquote><p>即协调世界时。UTC是以原子时秒长为基础，在时刻上尽量接近于GMT的一种时间计量系统。为确保UTC与GMT相差不会超过0.9秒，在有需要的情况下会在UTC内加上正或负闰秒。UTC现在作为世界标准时间使用</p></blockquote><h2 id="2-GMT-格林尼治平时"><a href="#2-GMT-格林尼治平时" class="headerlink" title="2.GMT(格林尼治平时)"></a>2.GMT(格林尼治平时)</h2><blockquote><p>即格林尼治标准时间，也就是世界时。GMT的正午是指当太阳横穿格林尼治子午线（本初子午线）时的时间。但由于地球自转不均匀不规则，导致GMT不精确，现在已经不再作为世界标准时间使用。</p></blockquote><p>UTC和GMT时间误差不超过0.9秒,即两者基本相同</p><h2 id="3-CST-北京时间"><a href="#3-CST-北京时间" class="headerlink" title="3.CST(北京时间)"></a>3.CST(北京时间)</h2><blockquote><p>北京时间，China Standard Time，中国标准时间。在时区划分上，属东八区，比协调世界时早8小时，记为UTC+8</p></blockquote><p>java日期工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat datetimeFormat = <span class="keyword">new</span> SimpleDateFormat(  </span><br><span class="line">            <span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(  </span><br><span class="line">            <span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat timeFormat = <span class="keyword">new</span> SimpleDateFormat(  </span><br><span class="line">            <span class="string">"HH:mm:ss"</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获得当前日期时间 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 日期时间格式yyyy-MM-dd HH:mm:ss </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">currentDatetime</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> datetimeFormat.format(now());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 格式化日期时间 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 日期时间格式yyyy-MM-dd HH:mm:ss </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDatetime</span><span class="params">(Date date)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> datetimeFormat.format(date);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 格式化日期时间 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern </span></span><br><span class="line"><span class="comment">     *            格式化模式，详见&#123;<span class="doctag">@link</span> SimpleDateFormat&#125;构造器 </span></span><br><span class="line"><span class="comment">     *            &lt;code&gt;SimpleDateFormat(String pattern)&lt;/code&gt; </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDatetime</span><span class="params">(Date date, String pattern)</span> </span>&#123;  </span><br><span class="line">        SimpleDateFormat customFormat = (SimpleDateFormat) datetimeFormat  </span><br><span class="line">                .clone();  </span><br><span class="line">        customFormat.applyPattern(pattern);  </span><br><span class="line">        <span class="keyword">return</span> customFormat.format(date);  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化 时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDatetime</span><span class="params">(Timestamp date, String pattern)</span> </span>&#123;  </span><br><span class="line">        SimpleDateFormat customFormat = (SimpleDateFormat) datetimeFormat  </span><br><span class="line">                .clone();  </span><br><span class="line">        customFormat.applyPattern(pattern);  </span><br><span class="line">        <span class="keyword">return</span> customFormat.format(date);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串日期 格式化后 变为字符串形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDatetime</span><span class="params">(String date, String pattern)</span> </span>&#123;  </span><br><span class="line">        Date date2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SimpleDateFormat customFormat = (SimpleDateFormat) datetimeFormat  </span><br><span class="line">        .clone();  </span><br><span class="line">customFormat.applyPattern(pattern);  </span><br><span class="line">date2 = customFormat.parse(date );</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> formatDatetime(date2, pattern);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getCurTimestamp</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">    String curDate =  formatDatetime( date, <span class="string">"yyyyMMddHHmmss"</span> ) ;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> Long.parseLong( curDate) ; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 字符串转换成日期</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> pattern 日期格式 "yyyy-MM-dd HH:mm:ss"</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">strToDate</span><span class="params">(String dateStr,String pattern)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">       SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line">       Date date = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">        date = format.parse(dateStr);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获得当前日期 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 日期格式yyyy-MM-dd </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">currentDate</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> dateFormat.format(now());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 格式化日期 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 日期格式yyyy-MM-dd </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(Date date)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> dateFormat.format(date);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获得当前时间 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 时间格式HH:mm:ss </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">currentTime</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> timeFormat.format(now());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 格式化时间 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 时间格式HH:mm:ss </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatTime</span><span class="params">(Date date)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> timeFormat.format(date);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获得当前时间的&lt;code&gt;java.util.Date&lt;/code&gt;对象 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">now</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">calendar</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        Calendar cal = GregorianCalendar.getInstance(Locale.CHINESE);  </span><br><span class="line">        cal.setFirstDayOfWeek(Calendar.MONDAY);  </span><br><span class="line">        <span class="keyword">return</span> cal;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获得当前时间的毫秒数 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 详见&#123;<span class="doctag">@link</span> System#currentTimeMillis()&#125; </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">millis</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * 获得当前Chinese月份 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">month</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> calendar().get(Calendar.MONTH) + <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获得月份中的第几天 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dayOfMonth</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> calendar().get(Calendar.DAY_OF_MONTH);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 今天是星期的第几天 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dayOfWeek</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> calendar().get(Calendar.DAY_OF_WEEK);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 今天是年中的第几天 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dayOfYear</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> calendar().get(Calendar.DAY_OF_YEAR);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     *判断原日期是否在目标日期之前 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dst </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBefore</span><span class="params">(Date src, Date dst)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> src.before(dst);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     *判断原日期是否在目标日期之后 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dst </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAfter</span><span class="params">(Date src, Date dst)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> src.after(dst);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     *判断两日期是否相同 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date1 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date2 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEqual</span><span class="params">(Date date1, Date date2)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> date1.compareTo(date2) == <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 判断某个日期是否在某个日期范围 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beginDate </span></span><br><span class="line"><span class="comment">     *            日期范围开始 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endDate </span></span><br><span class="line"><span class="comment">     *            日期范围结束 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src </span></span><br><span class="line"><span class="comment">     *            需要判断的日期 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">between</span><span class="params">(Date beginDate, Date endDate, Date src)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> beginDate.before(src) &amp;&amp; endDate.after(src);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获得当前月的最后一天 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * HH:mm:ss为0，毫秒为999 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">lastDayOfMonth</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        Calendar cal = calendar();  </span><br><span class="line">        cal.set(Calendar.DAY_OF_MONTH, <span class="number">0</span>); <span class="comment">// M月置零  </span></span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);<span class="comment">// H置零  </span></span><br><span class="line">        cal.set(Calendar.MINUTE, <span class="number">0</span>);<span class="comment">// m置零  </span></span><br><span class="line">        cal.set(Calendar.SECOND, <span class="number">0</span>);<span class="comment">// s置零  </span></span><br><span class="line">        cal.set(Calendar.MILLISECOND, <span class="number">0</span>);<span class="comment">// S置零  </span></span><br><span class="line">        cal.set(Calendar.MONTH, cal.get(Calendar.MONTH) + <span class="number">1</span>);<span class="comment">// 月份+1  </span></span><br><span class="line">        cal.set(Calendar.MILLISECOND, -<span class="number">1</span>);<span class="comment">// 毫秒-1  </span></span><br><span class="line">        <span class="keyword">return</span> cal.getTime();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获得当前月的第一天 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * HH:mm:ss SS为零 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">firstDayOfMonth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Calendar cal = calendar();  </span><br><span class="line">        cal.set(Calendar.DAY_OF_MONTH, <span class="number">1</span>); <span class="comment">// M月置1  </span></span><br><span class="line">        cal.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);<span class="comment">// H置零  </span></span><br><span class="line">        cal.set(Calendar.MINUTE, <span class="number">0</span>);<span class="comment">// m置零  </span></span><br><span class="line">        cal.set(Calendar.SECOND, <span class="number">0</span>);<span class="comment">// s置零  </span></span><br><span class="line">        cal.set(Calendar.MILLISECOND, <span class="number">0</span>);<span class="comment">// S置零  </span></span><br><span class="line">        <span class="keyword">return</span> cal.getTime();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Date <span class="title">weekDay</span><span class="params">(<span class="keyword">int</span> week)</span> </span>&#123;  </span><br><span class="line">        Calendar cal = calendar();  </span><br><span class="line">        cal.set(Calendar.DAY_OF_WEEK, week);  </span><br><span class="line">        <span class="keyword">return</span> cal.getTime();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获得周五日期 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 注：日历工厂方法&#123;<span class="doctag">@link</span> #calendar()&#125;设置类每个星期的第一天为Monday，US等每星期第一天为sunday </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">friday</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> weekDay(Calendar.FRIDAY);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获得周六日期 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 注：日历工厂方法&#123;<span class="doctag">@link</span> #calendar()&#125;设置类每个星期的第一天为Monday，US等每星期第一天为sunday </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">saturday</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> weekDay(Calendar.SATURDAY);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获得周日日期 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 注：日历工厂方法&#123;<span class="doctag">@link</span> #calendar()&#125;设置类每个星期的第一天为Monday，US等每星期第一天为sunday </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">sunday</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> weekDay(Calendar.SUNDAY);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 将字符串日期时间转换成java.util.Date类型 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 日期时间格式yyyy-MM-dd HH:mm:ss </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datetime </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseDatetime</span><span class="params">(String datetime)</span> <span class="keyword">throws</span> ParseException </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> datetimeFormat.parse(datetime);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 将字符串日期转换成java.util.Date类型 </span></span><br><span class="line"><span class="comment">     *&lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 日期时间格式yyyy-MM-dd </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParseException </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseDate</span><span class="params">(String date)</span> <span class="keyword">throws</span> ParseException </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> dateFormat.parse(date);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 将字符串日期转换成java.util.Date类型 </span></span><br><span class="line"><span class="comment">     *&lt;p&gt; </span></span><br><span class="line"><span class="comment">     * 时间格式 HH:mm:ss </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParseException </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseTime</span><span class="params">(String time)</span> <span class="keyword">throws</span> ParseException </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> timeFormat.parse(time);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 根据自定义pattern将字符串日期转换成java.util.Date类型 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datetime </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParseException </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseDatetime</span><span class="params">(String datetime, String pattern)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ParseException </span>&#123;  </span><br><span class="line">        SimpleDateFormat format = (SimpleDateFormat) datetimeFormat.clone();  </span><br><span class="line">        format.applyPattern(pattern);  </span><br><span class="line">        <span class="keyword">return</span> format.parse(datetime);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//北京时间转为utc时间，oozie 使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">BJ2UTC</span><span class="params">(String time)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = parseDatetime(time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Calendar cal = Calendar.getInstance( );</span><br><span class="line">        cal.setTime(date);<span class="comment">//date 换成已经已知的Date对象</span></span><br><span class="line">        cal.add(Calendar.HOUR_OF_DAY, -<span class="number">8</span>);<span class="comment">// before 8 hour</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd'T'HH:mm'Z'"</span>);</span><br><span class="line">        <span class="keyword">return</span> sdf.format(cal.getTime( ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 将时间戳转换为时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stampToDate</span><span class="params">(Long timestamp)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(timestamp);</span><br><span class="line">        <span class="keyword">return</span> formatDatetime(date) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到最近一个月的所有日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d 传入的日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getDaysMonthByDate</span><span class="params">(Date d,String pattern)</span><span class="comment">//根据传入的日期获取一个月内的所有日期</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;String&gt; lst=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        Date startDate = getOneMonthDate(d);</span><br><span class="line">        <span class="keyword">while</span> (!startDate.after(d)) &#123;</span><br><span class="line">            lst.add(formatDatetime(startDate,pattern));</span><br><span class="line">            startDate = getNext(startDate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到一个月前的日期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> d</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Date <span class="title">getOneMonthDate</span><span class="params">(Date d )</span></span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime( d );</span><br><span class="line">        calendar.add( Calendar.MONTH, -<span class="number">1</span> );</span><br><span class="line">        calendar.add( Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> calendar.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前日期+1天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getNext</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(date);</span><br><span class="line">        calendar.add(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> calendar.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datetime  2017-10-01T16:00:00.000Z</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format  yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//utc 转换为 北京时间 （时间带有T分隔符的） </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">UTC2BJ</span><span class="params">(String datetime, String format)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">SimpleDateFormat customFormat = (SimpleDateFormat) datetimeFormat.clone();  </span><br><span class="line">customFormat.applyPattern(format);</span><br><span class="line">customFormat.setTimeZone(TimeZone.getTimeZone(<span class="string">"UTC"</span>) );</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = customFormat.parse(  datetime);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span>  date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * UTC 时间转化为bj时间的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datetime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">UTC2BJStr</span><span class="params">(String datetime, String format)</span></span>&#123;</span><br><span class="line">    Date date = UTC2BJ(datetime,format);</span><br><span class="line">    <span class="keyword">return</span> formatDatetime( date );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某一天的开始时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Date <span class="title">getDayBegin</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">          Calendar cal = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">          cal.setTime(date);</span><br><span class="line">          cal.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">          cal.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">          cal.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">          cal.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">return</span> cal.getTime();</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 获取当天的结束时间</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Date <span class="title">getDayEnd</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">          Calendar cal = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">          cal.setTime(date);</span><br><span class="line">          cal.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">          cal.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">          cal.set(Calendar.SECOND, <span class="number">59</span>);</span><br><span class="line">          <span class="keyword">return</span> cal.getTime();</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//    String str = formatDatetime("1984-1-1 12:12:13","yyyy-MM-dd");</span></span><br><span class="line"><span class="comment">//        System.out.println(str );</span></span><br><span class="line"><span class="comment">//    Long t =  millis();</span></span><br><span class="line">    </span><br><span class="line">    String startCreateDate=<span class="string">"2017-10-01T16:00:00.000Z"</span>;</span><br><span class="line">    Date start = DateUtils.UTC2BJ( startCreateDate, <span class="string">"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"</span> );</span><br><span class="line">    System.out.println( start);</span><br><span class="line"><span class="comment">//    Long t =  1504681347375l;</span></span><br><span class="line"><span class="comment">//    String str = stampToDate(t );</span></span><br><span class="line"><span class="comment">//    System.out.println(t+"==="+ str );</span></span><br><span class="line"><span class="comment">//    </span></span><br><span class="line"><span class="comment">//    List list = getDaysMonthByDate(new Date(),"M月d");</span></span><br><span class="line"><span class="comment">//        for(int i=0;i&lt;list.size();i++ )&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println( list.get(i));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        String str2 = BJ2UTC( "2099-12-12 12:12:12") ;</span></span><br><span class="line"><span class="comment">//        System.out.print(str2 );</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JAVA时间总结&quot;&gt;&lt;a href=&quot;#JAVA时间总结&quot; class=&quot;headerlink&quot; title=&quot;JAVA时间总结&quot;&gt;&lt;/a&gt;JAVA时间总结&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-UTC-世界标准时间&quot;&gt;&lt;a href=&quot;#1-UTC-世界标准时间
      
    
    </summary>
    
      <category term="JAVA" scheme="https://tonywang1.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://tonywang1.github.io/tags/JAVA/"/>
    
      <category term="DATE" scheme="https://tonywang1.github.io/tags/DATE/"/>
    
  </entry>
  
  <entry>
    <title>maven浅尝辄止1</title>
    <link href="https://tonywang1.github.io/2019/09/18/maven1/"/>
    <id>https://tonywang1.github.io/2019/09/18/maven1/</id>
    <published>2019-09-17T20:28:36.000Z</published>
    <updated>2019-09-24T08:21:41.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven的认识"><a href="#maven的认识" class="headerlink" title="maven的认识"></a>maven的认识</h1><hr><h2 id="1-什么是maven？"><a href="#1-什么是maven？" class="headerlink" title="1.什么是maven？"></a>1.什么是maven？</h2><p>   Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件。<br><a href="https://baike.baidu.com/item/MAVEN" target="_blank" rel="noopener">参考</a> 　</p><h2 id="2-maven能帮我们解决什么问题"><a href="#2-maven能帮我们解决什么问题" class="headerlink" title="2. maven能帮我们解决什么问题"></a>2. maven能帮我们解决什么问题</h2><blockquote><ol><li>项目统一构建 - 统一生成项目结构</li><li>jar包统一管理 - 自动下载jar包、对应的jar包的依赖、jar包不同版本冲突问题、jar包版本统一管理</li><li>项目版本统一管理 - Release和SNAPSHOT版本即稳定版本和快照版本</li><li>项目的编译、测试、打包 、安装、发布等管理</li><li>项目不同环境配置的管理</li><li>不同项目之间依赖管理</li></ol></blockquote><h2 id="3-maven中如何使用profile来解决项目不同环境的问题"><a href="#3-maven中如何使用profile来解决项目不同环境的问题" class="headerlink" title="3. maven中如何使用profile来解决项目不同环境的问题"></a>3. maven中如何使用profile来解决项目不同环境的问题</h2><h3 id="profile使用原理：通过激活某个profile来加载对应的属性，达到不同环境加载不同属性作用"><a href="#profile使用原理：通过激活某个profile来加载对应的属性，达到不同环境加载不同属性作用" class="headerlink" title="profile使用原理：通过激活某个profile来加载对应的属性，达到不同环境加载不同属性作用"></a>profile使用原理：通过激活某个profile来加载对应的属性，达到不同环境加载不同属性作用</h3><blockquote><p>1、命令激活：通过打包的时候使用 -p profile名称指定该profile对应的环境的变量<br>2、属性加载：不同profile定义不同属性或者加载不同的属性文件-<strong><em>代码3.1</em></strong><br>3、属性引用：在2中定义的属性或者加载的属性文件的内容可以通过<code>${定义的属性名称}</code>引用<br>4、属性文件赋值：利用2中加载属性与resource中的filter连用，达到对属性文件赋值的作用，即代码2中的属性文件中所有带有<code>${定义的属性名称}</code>引用的变量，在编译阶段都会用实际的属性代替，<strong><em>代码3.2</em></strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">代码3.1</span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认激活开发配制，使用config-dev.properties来替换设置过虑的资源文件中的$&#123;key&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>config-dev.properties<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">mysql.username</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">mysql.username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>config-test.properties<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">mysql.username</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">mysql.username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>config-prod.properties<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">mysql.username</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">mysql.username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">``` xml</span><br><span class="line">*** 代码3.2-这里filtering属性=true代表所有资源文件中带有placehoder的变量都会用maven的便来给你代替 ***</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Resource Filter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-maven中如何使用resource打不同的资源文件来解决不同环境问题"><a href="#4-maven中如何使用resource打不同的资源文件来解决不同环境问题" class="headerlink" title="4. maven中如何使用resource打不同的资源文件来解决不同环境问题"></a>4. maven中如何使用resource打不同的资源文件来解决不同环境问题</h2><ul><li>默认属性文件目录处理：根据profile属性拼接并打包对应的配置文件如代码<strong><em>4.1</em></strong></li><li>源文件目录下配置文件处理：拷贝java源文件目录下的配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">代码4.1</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application-dev.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application-test.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application-prod.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>application.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">include</span>&gt;</span>application-$&#123;profiles.active&#125;.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">代码4.2</span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!-- 设定主资源目录  --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，只处理如下配置中包含的资源类型 --&gt;</span>     </span><br><span class="line"> <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">includes</span>&gt;</span>  </span><br><span class="line">         </span><br><span class="line">    <span class="comment">&lt;!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，不处理如下配置中包含的资源类型（剔除下如下配置中包含的资源类型）--&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">excludes</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.yaml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，指定处理后的资源文件输出目录，默认是$&#123;build.outputDirectory&#125;指定的目录--&gt;</span>      </span><br><span class="line">    <span class="comment">&lt;!--&lt;targetPath&gt;$&#123;build.outputDirectory&#125;&lt;/targetPath&gt; --&gt;</span>      </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，是否对主资源目录开启资源过滤 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-maven中父子项目依赖关系"><a href="#4-maven中父子项目依赖关系" class="headerlink" title="4. maven中父子项目依赖关系"></a>4. maven中父子项目依赖关系</h2><h3 id="父子项目依赖的多模块处理作用"><a href="#父子项目依赖的多模块处理作用" class="headerlink" title="父子项目依赖的多模块处理作用:"></a><strong><em>父子项目依赖的多模块处理作用:</em></strong></h3><blockquote><p>复杂项目通过合理拆分达到代码复用、方便管理</p></blockquote><ul><li>父项目设置-如代码4.1 <strong><em>packaging=pom</em></strong><br>modules中包含所有子项目，里面的名字为各个项目的<em>artifactId</em>参数</li><li>子项目设置-如代码4.2，里面的参数为父项目的相应值，子项目不指定<em>groupId</em>，会自动从父项目中继承</li><li>子项目之家可以通过<em>dependency</em>来进行引用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">代码4.1</span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">代码4.2</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>online_retailers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-maven中必要节点的作用说明"><a href="#5-maven中必要节点的作用说明" class="headerlink" title="5.maven中必要节点的作用说明"></a>5.maven中必要节点的作用说明</h2><ul><li><p>filters：定义指定filter属性的位置，例如filter元素赋值filters/filter1.properties,那么这个文件里面就可以定义name=value对，这个name=value对的值就可以在工程pom中通过${name}引用，默认的filter目录是${basedir}/src/main/fiters/</p></li><li><p>packing：主要打什么类型的包-pom、jar(默认)、war</p><blockquote><ul><li>pom - 父类型都为pom</li><li>jar - 内部调用或者服务使用</li><li>war - 部署的项目</li></ul></blockquote></li><li><p>modelVersion:模型版本，暂时固定为4.0.0</p></li><li><p>groupId： </p><blockquote><p>1 项目构建的时候第一次会根据这个参数构建目录<br>2 打包后jar位置为：<em>repository<em>后面的目录为-groupId所设置的目录 、在后面为</em>artifactId<em>，在后面为版本</em>version</em> ，所以groupId+artifactId+version决定了jar包的位置</p></blockquote></li><li><p>artifactId：项目的唯一ID</p></li><li><p>version：版本号，分release和snapshot版本</p></li><li><p>name:项目的显示名称，idea的maven视图中会显示这个名称</p></li></ul><h2 id="6-maven中内置的属性变量"><a href="#6-maven中内置的属性变量" class="headerlink" title="6. maven中内置的属性变量"></a>6. maven中内置的属性变量</h2><p>内置属性(Maven预定义,用户可以直接使用)</p><blockquote><ul><li><code>${basedir}</code>表示项目根目录,即包含pom.xml文件的目录;</li><li><code>${version}</code>表示项目版本;</li><li><code>${project.basedir}</code>同${basedir};</li><li><code>${project.baseUri}</code>表示项目文件地址;</li><li><code>${maven.build.timestamp}</code>表示项目构件开始时间;</li></ul></blockquote><p> POM属性</p><blockquote><ul><li><code>${project.build.directory}</code>表示主源码路径</li><li><code>${project.build.sourceEncoding}</code>表示主源码的编码格式</li><li><code>${project.build.sourceDirectory}</code>表示主源码路径</li><li><code>${project.build.finalName}</code>表示输出文件名称</li><li><code>${project.version}</code>表示项目版本,与${version}相同</li></ul></blockquote><p> Java系统属性(所有的Java系统属性都可以使用Maven属性引用)</p><blockquote><ul><li>使用mvn help:system命令可查看所有的Java系统属性;</li><li>System.getProperties()可得到所有的Java属性;</li><li>${user.home}表示用户目录</li></ul></blockquote><p>环境变量属性(所有的环境变量都可以用以env.开头的Maven属性引用)</p><blockquote><p>-使用mvn help:system命令可查看所有环境变量;</p><ul><li><code>${env.JAVA_HOME}</code>表示JAVA_HOME环境变量的值;</li></ul></blockquote><h2 id="8-maven的生命周期，以及执行规则"><a href="#8-maven的生命周期，以及执行规则" class="headerlink" title="8.maven的生命周期，以及执行规则"></a>8.maven的生命周期，以及执行规则</h2><h4 id="1）-生命周期"><a href="#1）-生命周期" class="headerlink" title="1） 生命周期"></a>1） 生命周期</h4><blockquote><p>Maven有三个独立的生命周期为：clean-项目清理、default-项目构建、site-站点生成</p></blockquote><h3 id="2）生命周期对应的阶段"><a href="#2）生命周期对应的阶段" class="headerlink" title="2）生命周期对应的阶段"></a>2）生命周期对应的阶段</h3><p>clean生命周期包含三个阶段</p><blockquote><ul><li>pre-clean：执行一些需要在clean之前完成的工作</li><li>clean：移除所有上一次构建生成的文件</li><li>post-clean：执行一些需要在clean之后立刻完成的工作</li></ul></blockquote><p>default生命周期的阶段列表：</p><blockquote><ul><li>validate：验证</li><li>initialize：initialize build state, e.g. set properties or create directories.</li><li>generate-sources：generate any source code for inclusion in compilation.</li><li>process-sources：process the source code, for example to filter any values.</li><li>generate-resources：处理资源文件</li><li>process-resources：复制并处理资源文件，至目标目录，准备打包</li><li>compile：编译项目源代码</li><li>process-classes：post-process the generated files from compilation, for example to do bytecode enhancement on Java classes.</li><li>generate-test-sources：generate any test source code for inclusion in compilation.</li><li>process-test-sources：process the test source code, for example to filter any values.</li><li>generate-test-resources create resources for testing.</li><li>process-test-resources 复制并处理资源文件，至目标测试目录</li><li>test-compile 编译测试源代码</li><li>process-test-classes： post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes. For Maven 2.0.5 and above.</li><li>test：使用合适的单元测试框架运行测试，这些测试代码不会被打包或者部署。</li><li>prepare-package：perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package. (Maven 2.1 and above)</li><li>package：接受编译好的代码，打包成可发布的格式，如jar</li><li>pre-integration-test：perform actions required before integration tests are executed. This may involve things such as setting up the required environment.</li><li>integration-test：process and deploy the package if necessary into an environment where integration tests can be run.</li><li>post-integration-test：perform actions required after integration tests have been executed. This may including cleaning up the environment.</li><li>verify run any checks to verify the package is valid and meets quality criteria.</li><li>install：将包安装至本地仓库，以让其他项目依赖</li><li>deploy</li></ul></blockquote><h3 id="3-生命周期中阶段的执行关系"><a href="#3-生命周期中阶段的执行关系" class="headerlink" title="3) 生命周期中阶段的执行关系"></a>3) 生命周期中阶段的执行关系</h3><ul><li>某个特定生命周期中，生命周期后面的阶段执行，都会伴随着前面阶段的执行</li><li>不同生命周期之间不依赖</li></ul><h3 id="4）生命周期、阶段、插件关系"><a href="#4）生命周期、阶段、插件关系" class="headerlink" title="4）生命周期、阶段、插件关系"></a>4）生命周期、阶段、插件关系</h3><p>一个生命周期中有多个阶段，一个阶段可以绑定一个或者多个插件</p><h2 id="9-SNAPSHOT版本和release版本区别"><a href="#9-SNAPSHOT版本和release版本区别" class="headerlink" title="9.SNAPSHOT版本和release版本区别"></a>9.SNAPSHOT版本和release版本区别</h2><ul><li><p>Release版本则代表稳定的版本</p><blockquote><p>只要版本不变，则打包的时候会用本地库中的版本，不会去远程服务器上更新。</p></blockquote></li><li><p>Snapshot版本代表不稳定、尚处于开发中的版本</p><blockquote><p>项目每次构建的时候，Maven会去远程repository下载snapshot的最新版本，如果被依赖的snapshot版本不断更新，则项目每次构建的时候的结果都会不一样</p></blockquote></li></ul><h2 id="10-依赖包的scope取值说明"><a href="#10-依赖包的scope取值说明" class="headerlink" title="10.依赖包的scope取值说明"></a>10.依赖包的scope取值说明</h2><blockquote><ul><li>compile，缺省值，适用于所有阶段，会随着项目一起发布。</li><li>provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。</li><li>runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。</li><li>test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。</li><li>system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。</li></ul></blockquote><h2 id="11-自定义属性使用"><a href="#11-自定义属性使用" class="headerlink" title="11.自定义属性使用"></a>11.自定义属性使用</h2><p>标签“properties”中定义的属性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;maven的认识&quot;&gt;&lt;a href=&quot;#maven的认识&quot; class=&quot;headerlink&quot; title=&quot;maven的认识&quot;&gt;&lt;/a&gt;maven的认识&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-什么是maven？&quot;&gt;&lt;a href=&quot;#1-什么是maven？&quot; 
      
    
    </summary>
    
      <category term="MAVEN" scheme="https://tonywang1.github.io/categories/MAVEN/"/>
    
    
      <category term="MAVEN" scheme="https://tonywang1.github.io/tags/MAVEN/"/>
    
  </entry>
  
  <entry>
    <title>cron使用</title>
    <link href="https://tonywang1.github.io/2019/09/18/linux_cron/"/>
    <id>https://tonywang1.github.io/2019/09/18/linux_cron/</id>
    <published>2019-09-17T20:28:36.000Z</published>
    <updated>2019-09-25T06:21:48.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CRON使用"><a href="#CRON使用" class="headerlink" title="CRON使用"></a>CRON使用</h1><hr><h2 id="1-什么是cron表达式"><a href="#1-什么是cron表达式" class="headerlink" title="1.什么是cron表达式"></a>1.什么是cron表达式</h2><p>  Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式</p><h2 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2 基本语法"></a>2 基本语法</h2><p>corn从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份</p><h2 id="3-基本语法中字段含义"><a href="#3-基本语法中字段含义" class="headerlink" title="3 基本语法中字段含义"></a>3 基本语法中字段含义</h2><table><thead><tr><th>字段</th><th align="right">允许值</th><th align="center">允许的特殊字符</th></tr></thead><tbody><tr><td>秒（Seconds）</td><td align="right">0~59的整数</td><td align="center">, - * /    四个字符</td></tr><tr><td>分（Minutes）</td><td align="right">0~59的整数</td><td align="center">, - * /    四个字符</td></tr><tr><td>小时（Hours）</td><td align="right">0~23的整数</td><td align="center">, - * /    四个字符</td></tr><tr><td>日期（DayofMonth）</td><td align="right">1~31的整数（但是你需要考虑你月的天数）</td><td align="center">,- * ? / L W C     八个字符</td></tr><tr><td>月份（Month）</td><td align="right">1~12的整数或者 JAN-DEC</td><td align="center">, - * /    四个字符</td></tr><tr><td>星期（DayofWeek）</td><td align="right">1~7的整数或者 SUN-SAT （1=SUN）</td><td align="center">, - * ? / L C #     八个字符</td></tr><tr><td>年(可选，留空)（Year）</td><td align="right">1970~2099</td><td align="center">, - * /    四个字符</td></tr></tbody></table><p>（1）*：表示匹配该域的任意值。假如在Minutes域使用*, 即表示每分钟都会触发事件。</p><p>　　（2）?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用<em>，如果使用</em>表示不管星期几都会触发，实际上并不是这样。</p><p>　　（3）-：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 </p><p>　　（4）/：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次. </p><p>　　（5）,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 </p><p>　　（6）L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 </p><p>　　（7）W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</p><p>　　（8）LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 </p><p>　　（9）#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。　　</p><h2 id="4-常用样例"><a href="#4-常用样例" class="headerlink" title="4 常用样例"></a>4 常用样例</h2><p>（1）0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务<br>（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业<br>（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作<br>（4）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点<br>（5）0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时<br>（6）0 0 12 ? * WED    表示每个星期三中午12点<br>（7）0 0 12 * * ?   每天中午12点触发<br>（8）0 15 10 ? * *    每天上午10:15触发<br>（9）0 15 10 * * ?     每天上午10:15触发<br>（10）0 15 10 * * ? *    每天上午10:15触发<br>（11）0 15 10 * * ? 2005    2005年的每天上午10:15触发<br>（12）0 * 14 * * ? 在每天下午2点到下午2:59期间的每1分钟触发 （13）0 0/5 14 * * ? 在每天下午2点到下午2:55期间的每5分钟触发<br>（14）0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发<br>（15）0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发<br>（16）0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发<br>（17）0 15 10 ? * MON-FRI    周一至周五的上午10:15触发<br>（18）0 15 10 15 * ?    每月15日上午10:15触发<br>（19）0 15 10 L * ?    每月最后一日的上午10:15触发<br>（20）0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发<br>（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发<br>（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发<br>（23）*/5 * * * * ? 每5秒执行一次<br>（24）0 */1 * * * ? 每隔一分钟执行一次<br>（25）0 1 * * * ?  每个小时的1分钟执行一次，如1点1分、2点1分<br>（26）0 0 1 * * ? 每天零晨1点执行<br>（26）0 0 2 * * ? 每天零晨2点执行<br>（27）0 0 1 20 * ? 每个月20日零晨1点执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CRON使用&quot;&gt;&lt;a href=&quot;#CRON使用&quot; class=&quot;headerlink&quot; title=&quot;CRON使用&quot;&gt;&lt;/a&gt;CRON使用&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-什么是cron表达式&quot;&gt;&lt;a href=&quot;#1-什么是cron表达式&quot; class=
      
    
    </summary>
    
      <category term="LINUX" scheme="https://tonywang1.github.io/categories/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://tonywang1.github.io/tags/LINUX/"/>
    
      <category term="CRON" scheme="https://tonywang1.github.io/tags/CRON/"/>
    
  </entry>
  
  <entry>
    <title>CURL使用</title>
    <link href="https://tonywang1.github.io/2019/09/18/linux_curl/"/>
    <id>https://tonywang1.github.io/2019/09/18/linux_curl/</id>
    <published>2019-09-17T20:28:36.000Z</published>
    <updated>2019-09-25T03:18:29.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CURL使用"><a href="#CURL使用" class="headerlink" title="CURL使用"></a>CURL使用</h1><hr><h2 id="1-curl作用"><a href="#1-curl作用" class="headerlink" title="1.curl作用"></a>1.curl作用</h2><p>  　curl是一个利用URL规则在命令行下工作的文件传输工具</p><h2 id="2语法"><a href="#2语法" class="headerlink" title="2语法"></a>2语法</h2><p> curl [option] [url]</p><h2 id="3实例"><a href="#3实例" class="headerlink" title="3实例"></a>3实例</h2><ul><li>发送get、post请求-代码3.1<ul><li>发送带有参数的get和post请求 - 3.2 </li><li>查看请求的整个请求链路-调试谁用 - 3.3</li><li>发送带有header请求 - 4.4</li><li>发送设置host的请求 -4.4</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码3.1</span><br><span class="line">curl -i(返回头信息) -X POST/Get http//www.baidu.com</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码3.2</span><br><span class="line">- 发送applicationjson数据</span><br><span class="line">- curl -H &quot;Content-Type:application/json&quot; -X POST -d &apos;&#123;&quot;user&quot;: &quot;admin&quot;, &quot;passwd&quot;:&quot;12345678&quot;&#125;&apos; https://proxy.mimvp1.com/login</span><br><span class="line">- 普通数据提交</span><br><span class="line">- curl -d &quot;param1=value1&amp;param2=value2&quot; -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -X POST http://localhost:3001/data</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码3.3</span><br><span class="line">curl  -X POST/Get http//www.baidu.com -xvo /usr/null</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码4.4</span><br><span class="line">curl  &apos;http://localhost/hadoop1/clusters/list?page=1&amp;pageSize=50&amp;total=0&amp;tokenId=tokenId_a218_4ab8_8404_3ac9a4b63d2c&apos; -H &apos;host:bd1prod.localhost.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CURL使用&quot;&gt;&lt;a href=&quot;#CURL使用&quot; class=&quot;headerlink&quot; title=&quot;CURL使用&quot;&gt;&lt;/a&gt;CURL使用&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-curl作用&quot;&gt;&lt;a href=&quot;#1-curl作用&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="LINUX" scheme="https://tonywang1.github.io/categories/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://tonywang1.github.io/tags/LINUX/"/>
    
      <category term="CURL" scheme="https://tonywang1.github.io/tags/CURL/"/>
    
  </entry>
  
  <entry>
    <title>mysql-sql执行流程</title>
    <link href="https://tonywang1.github.io/2019/09/18/linux_cron/"/>
    <id>https://tonywang1.github.io/2019/09/18/linux_cron/</id>
    <published>2019-09-17T20:28:36.000Z</published>
    <updated>2019-09-27T09:14:20.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MYSQL-SQL执行流程"><a href="#MYSQL-SQL执行流程" class="headerlink" title="MYSQL-SQL执行流程"></a>MYSQL-SQL执行流程</h1><hr><h2 id="1-SQL的执行流程"><a href="#1-SQL的执行流程" class="headerlink" title="1.SQL的执行流程"></a>1.SQL的执行流程</h2><p> 词法分析-&gt;语法分析-解析树-预处理-检查权限-新解析树-查询优化器-执行计划-存储引擎获取数据</p><h2 id="1-SQL-的关键字执行的流程如何"><a href="#1-SQL-的关键字执行的流程如何" class="headerlink" title="1.SQL 的关键字执行的流程如何"></a>1.SQL 的关键字执行的流程如何</h2><p> 1）执行的SQL语句-每一步执行的输出，是下一步的输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">    &lt; select_list &gt;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    &lt; left_table &gt; &lt; join_type &gt;</span><br><span class="line"><span class="keyword">JOIN</span> &lt; right_table &gt; <span class="keyword">ON</span> &lt; join_condition &gt;</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    &lt; where_condition &gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    &lt; group_by_list &gt;</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    &lt; having_condition &gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    &lt; order_by_condition &gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt; limit_number &gt;</span><br></pre></td></tr></table></figure><p>2)实际执行流程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;left_table&gt;</span><br><span class="line">ON &lt;join_condition&gt;</span><br><span class="line">&lt;join_type&gt; JOIN &lt;right_table&gt;</span><br><span class="line">WHERE &lt;where_condition&gt;</span><br><span class="line">GROUP BY &lt;group_by_list&gt;</span><br><span class="line">HAVING &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">DISTINCT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure><h2 id="3-执行顺序实例"><a href="#3-执行顺序实例" class="headerlink" title="3 执行顺序实例"></a>3 执行顺序实例</h2><p>1）准备工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE /*!32312 IF NOT EXISTS*/`test1db` /*!40100 DEFAULT CHARACTER SET utf8 */;</span><br><span class="line">USE `test1db`;</span><br><span class="line">CREATE TABLE `table1` (</span><br><span class="line">  `uid` varchar(10) NOT NULL,</span><br><span class="line">  `name` varchar(10) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`uid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">insert  into `table1`(`uid`,`name`) values (&apos;aaa&apos;,&apos;mike&apos;),(&apos;bbb&apos;,&apos;jack&apos;),(&apos;ccc&apos;,&apos;mike&apos;),(&apos;ddd&apos;,&apos;mike&apos;);</span><br><span class="line"></span><br><span class="line">CREATE TABLE `table2` (</span><br><span class="line">  `oid` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `uid` varchar(10) DEFAULT NULL,</span><br><span class="line">  `old` int(11) DEFAULT NULL COMMENT &apos;年龄&apos;,</span><br><span class="line">  PRIMARY KEY (`oid`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">insert  into `table2`(`oid`,`uid`,`old`) values (1,&apos;aaa&apos;,2),(2,&apos;aaa&apos;,1),(3,&apos;bbb&apos;,3),(4,&apos;bbb&apos;,4),(5,&apos;bbb&apos;,5),(6,&apos;ccc&apos;,6),(7,NULL,7);</span><br></pre></td></tr></table></figure><p>2）最终的执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    a.uid,</span><br><span class="line">    count(b.oid) AS total </span><br><span class="line">FROM</span><br><span class="line">    table1 AS a</span><br><span class="line">LEFT JOIN table2 AS b ON a.uid = b.uid</span><br><span class="line">WHERE</span><br><span class="line">    a. NAME = &apos;mike&apos;</span><br><span class="line">GROUP BY</span><br><span class="line">    a.uid</span><br><span class="line">HAVING</span><br><span class="line">    count(b.oid) &lt; 2</span><br><span class="line">ORDER BY</span><br><span class="line">    total DESC</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure><p>3）执行FROM关键字-笛卡尔积</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * </span><br><span class="line">from table1  a </span><br><span class="line">left  join table2 b on a.uid=b.uid</span><br></pre></td></tr></table></figure><p>4) ON关键字过滤-v-4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table1  a join table2 b on a.uid=b.uid ;</span><br></pre></td></tr></table></figure><p>5)如果使用了外连接(LEFT,RIGHT,FULL)，主表（保留表）中的不符合ON条件的列也会被加入到这一步的执行结果中-生成新的虚拟表v-5</p><p>6）WHERE条件过滤 -v-6<br>对于上面的执行结果，满足WHERE条件的结果集的数据，会生成新的虚拟表 v-6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * </span><br><span class="line">from table1  a </span><br><span class="line">left  join table2 b on a.uid=b.uid </span><br><span class="line">where a.name=&apos;mike&apos;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：ON和where条件过滤的区别</p><blockquote><p>1 在inner join的时候 ，两者查询的结果一样<br>2 在外连接(LEFT,RIGHT,FULL)查询的时候，on对关联表进行条件过滤，然后在与主表进行关联，这个过程中这个查询条件对主表不会有影响<br>3 在外连接(LEFT,RIGHT,FULL)查询的时候，where 条件过滤，是对连接后的整个临时表进行过滤，不分主从</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查询示例：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1  a <span class="keyword">left</span>  <span class="keyword">join</span> table2 b <span class="keyword">on</span> a.uid=b.uid <span class="keyword">and</span> b.oid=<span class="string">'1'</span> ; </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1  a <span class="keyword">left</span>  <span class="keyword">join</span> table2 b <span class="keyword">on</span> a.uid=b.uid <span class="keyword">where</span>  b.oid=<span class="string">'1'</span> ;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><blockquote><p>主表进行过滤必须放到WHERE条件后，从表过滤如果先过滤后链接则条件放到on后面，如果先链接在过滤则放到WHERE条件后</p></blockquote><p>7）GROUP BY 关键字进行过滤<br> 这个会对表 v-6中的表的某些字段进行分组，<strong>他对于后面的SELECT,和HAVING所用到的列必须包含在GROUP BY 中，对于没有出现的必须进行聚合运算</strong></p><p> 对于mysql上面的限制条件可以忽略，但是select字段中没有出现在group by中的字段，会随机选择一个值。</p><p>8)HAVING 关键字<br>作用：对分组后的数据进行过滤，满足条件的数据放到下一个虚拟表中-v-8</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.uid,</span><br><span class="line">    <span class="keyword">count</span>(b.oid) <span class="keyword">AS</span> total </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    table1 <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">AS</span> b <span class="keyword">ON</span> a.uid = b.uid</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a. <span class="keyword">NAME</span> = <span class="string">'mike'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    a.uid</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    <span class="keyword">count</span>(b.oid) &lt; <span class="number">1</span></span><br></pre></td></tr></table></figure><p>9)SELECT 对select子句进行处理<br>1 - 计算select子句的表达式<br>2 - 如果有 DISTINCT，则进行去重</p><p>10）ORDER BY-根据ORDER BY 子句的条件对结果进行排序<br><strong>唯一可使用SELECT中别名的地方</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    a.uid,</span><br><span class="line">    count(b.oid) AS total </span><br><span class="line">FROM</span><br><span class="line">    table1 AS a</span><br><span class="line">LEFT JOIN table2 AS b ON a.uid = b.uid</span><br><span class="line">WHERE</span><br><span class="line">    a. NAME = &apos;mike&apos;</span><br><span class="line">GROUP BY</span><br><span class="line">    a.uid</span><br><span class="line">HAVING</span><br><span class="line">    count(b.oid) &lt; 1</span><br><span class="line">ORDER BY</span><br><span class="line">    total DESC</span><br></pre></td></tr></table></figure><p>11) LIMIT-子句从上一步得到的虚拟表中选出从指定位置开始的指定行数据</p><h2 id="2-SQL中关联表on后面的条件与where后面条件有什么不同"><a href="#2-SQL中关联表on后面的条件与where后面条件有什么不同" class="headerlink" title="2 SQL中关联表on后面的条件与where后面条件有什么不同"></a>2 SQL中关联表on后面的条件与where后面条件有什么不同</h2><p>详细见上面的6</p><p>##3.同一个字段不同值的统计处理<br>查询一个用户有多少条年龄数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select  name,</span><br><span class="line"> sum(case when (old is not null)  then  1 else 0 end  ) &apos;个数&apos;</span><br><span class="line">from table1  a </span><br><span class="line">left  join table2 b on a.uid=b.uid </span><br><span class="line">group by a.name ;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MYSQL-SQL执行流程&quot;&gt;&lt;a href=&quot;#MYSQL-SQL执行流程&quot; class=&quot;headerlink&quot; title=&quot;MYSQL-SQL执行流程&quot;&gt;&lt;/a&gt;MYSQL-SQL执行流程&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-SQL的执行流程&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="MYSQL" scheme="https://tonywang1.github.io/categories/MYSQL/"/>
    
    
      <category term="MYSQL" scheme="https://tonywang1.github.io/tags/MYSQL/"/>
    
      <category term="SQL" scheme="https://tonywang1.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>RESOURCE插件说明</title>
    <link href="https://tonywang1.github.io/2019/09/18/maven_plugin_resource/"/>
    <id>https://tonywang1.github.io/2019/09/18/maven_plugin_resource/</id>
    <published>2019-09-17T20:28:36.000Z</published>
    <updated>2019-09-24T08:20:15.479Z</updated>
    
    <content type="html"><![CDATA[<p>#RESOURCE插件说明</p><p>##1插件说明</p><ul><li><a href="http://maven.apache.org/plugins/maven-resources-plugin/resources-mojo.html" target="_blank" rel="noopener">官方说明</a></li><li>resources:resources标签全名为org.apache.maven.plugins:maven-resources-plugin:3.1.0:resources<br>即plugin中配置的资源的插件和resource标签的是同样的东西</li><li>资源插件会拷贝对应的资源根据resource标签的设置</li></ul><p>##2插件种类<br>Resources插件目标有三个，主要的不同点在于：拷贝资源中的一些默认值和文件的输出目录不同 </p><ul><li>resources:resources:拷贝main resources到main output directory,它绑定了process-resources生命周期阶段，当执行Compiler:compile插件目标前就会自动执行此阶段。</li><li>resources:testResources：拷贝test resources到test output directory，它绑定了process-test-resources生命周期阶段，当执行surefire:test插件目标前就会执行此阶段</li><li>resources:copy-resources：需要自己手动配置去拷贝文件，拷贝资源去输出目录。</li></ul><p>##3为什么要有resource插件<br>项目中文件通常有两种：</p><ul><li>1 需要编译的java文件 </li><li>2 不需要编译的资源文件 </li></ul><p>这两种文件通过不同的插件分别处理，其中第二种资源文件就是需要resource插件处理</p><p>##4resource插件能解决什么问题？</p><ul><li>资源文件拷贝目录的设置 - 代码4.2</li><li>插件读取配置的编码情况 - 代码4.1</li><li>过滤器的设置 - 代码4.3</li><li>精确控制资源拷贝- 代码4.4</li><li>排除过滤 - 代码4.5</li><li>copy-resources</li><li>主目录中某些资源的拷贝 - 代码4.6</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">代码4.1</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">代码4.2</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources1<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources2<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">代码4.3</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>filter-values.properties<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">代码4.4</span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.txt<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.rtf<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.bmp<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.jpg<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.jpeg<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.gif<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">代码4.5</span><br><span class="line"><span class="comment">&lt;!-- 过滤后缀为pdf和swf的文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nonFilteredFileExtensions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nonFilteredFileExtension</span>&gt;</span>pdf<span class="tag">&lt;/<span class="name">nonFilteredFileExtension</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nonFilteredFileExtension</span>&gt;</span>swf<span class="tag">&lt;/<span class="name">nonFilteredFileExtension</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nonFilteredFileExtensions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">代码4.6</span><br><span class="line">  <span class="comment">&lt;!-- 资源目录 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 设定主资源目录  --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，只处理如下配置中包含的资源类型 --&gt;</span>     </span><br><span class="line"> <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">includes</span>&gt;</span>  </span><br><span class="line">             </span><br><span class="line">        <span class="comment">&lt;!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，不处理如下配置中包含的资源类型（剔除下如下配置中包含的资源类型）--&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">excludes</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.yaml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，指定处理后的资源文件输出目录，默认是$&#123;build.outputDirectory&#125;指定的目录--&gt;</span>      </span><br><span class="line">        <span class="comment">&lt;!--&lt;targetPath&gt;$&#123;build.outputDirectory&#125;&lt;/targetPath&gt; --&gt;</span>      </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，是否对主资源目录开启资源过滤 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#RESOURCE插件说明&lt;/p&gt;
&lt;p&gt;##1插件说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://maven.apache.org/plugins/maven-resources-plugin/resources-mojo.html&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="MAVEN" scheme="https://tonywang1.github.io/categories/MAVEN/"/>
    
    
      <category term="MAVEN" scheme="https://tonywang1.github.io/tags/MAVEN/"/>
    
  </entry>
  
  <entry>
    <title>MAVEN插件总览</title>
    <link href="https://tonywang1.github.io/2019/09/18/maven_plugin/"/>
    <id>https://tonywang1.github.io/2019/09/18/maven_plugin/</id>
    <published>2019-09-17T20:28:36.000Z</published>
    <updated>2019-09-24T08:20:50.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven插件知识总览"><a href="#maven插件知识总览" class="headerlink" title="maven插件知识总览"></a>maven插件知识总览</h1><hr><h2 id="1-对于maven插件的了解"><a href="#1-对于maven插件的了解" class="headerlink" title="1.对于maven插件的了解"></a>1.对于maven插件的了解</h2><p>插件官网： <a href="http://maven.apache.org/plugins/index.html" target="_blank" rel="noopener">http://maven.apache.org/plugins/index.html</a><br> Maven 本质上是一个插件框架，它的核心并不执行任何具体的构建任务，所有这些任务都交给插件来完成。如编译源代码是由<br> maven-compiler-plugin完成的，每个任务阶段对应了一个插件目标（goal），每个插件会有一个或者多个目标，如maven- compiler-plugin的compile目标用来编译位于src/main/java/目录下的主源码，testCompile目标用来编译位于src/test/java/目录下的测试源码 　</p><h2 id="2-常用插件"><a href="#2-常用插件" class="headerlink" title="2.常用插件"></a>2.常用插件</h2><h3 id="1）-maven-antrun-plugin"><a href="#1）-maven-antrun-plugin" class="headerlink" title="1）  maven-antrun-plugin"></a>1）  maven-antrun-plugin</h3><p><a href="http://maven.apache.org/plugins/maven-antrun-plugin/" target="_blank" rel="noopener">http://maven.apache.org/plugins/maven-antrun-plugin/</a></p><h3 id="2）-maven-archetype-plugin"><a href="#2）-maven-archetype-plugin" class="headerlink" title="2） maven-archetype-plugin"></a>2） maven-archetype-plugin</h3><p><a href="http://maven.apache.org/archetype/maven-archetype-plugin/" target="_blank" rel="noopener">http://maven.apache.org/archetype/maven-archetype-plugin/</a></p><h3 id="3）-maven-assembly-plugin"><a href="#3）-maven-assembly-plugin" class="headerlink" title="3）  maven-assembly-plugin"></a>3）  maven-assembly-plugin</h3><p><a href="http://maven.apache.org/plugins/maven-antrun-plugin/" target="_blank" rel="noopener">http://maven.apache.org/plugins/maven-antrun-plugin/</a></p><h3 id="4）-maven-dependency-plugin"><a href="#4）-maven-dependency-plugin" class="headerlink" title="4） maven-dependency-plugin"></a>4） maven-dependency-plugin</h3><p><a href="http://maven.apache.org/plugins/maven-dependency-plugin/" target="_blank" rel="noopener">http://maven.apache.org/plugins/maven-dependency-plugin/</a></p><p>maven-dependency-plugin最大的用途是帮助分析项目依赖，dependency:list能够列出项目最终解析到的依赖列表，dependency:tree能进一步的描绘项目依赖树，dependency:analyze可以告诉你项目依赖潜在的问题，如果你有直接使用到的却未声明的依赖，该目标就会发出警告。maven-dependency-plugin还有很多目标帮助你操作依赖文件，例如dependency:copy-dependencies能将项目依赖从本地Maven仓库复制到某个特定的文件夹下面。</p><h3 id="5）maven-help-plugin"><a href="#5）maven-help-plugin" class="headerlink" title="5）maven-help-plugin"></a>5）maven-help-plugin</h3><p>官网插件地址：<a href="http://maven.apache.org/plugins/maven-help-plugin/" target="_blank" rel="noopener">http://maven.apache.org/plugins/maven-help-plugin/</a></p><p>maven-help-plugin是一个小巧的辅助工具，最简单的help:system可以打印所有可用的环境变量和Java系统属性。help:effective-pom和help:effective-settings最 为有用，它们分别打印项目的有效POM和有效settings，有效POM是指合并了所有父POM（包括Super POM）后的XML，当你不确定POM的某些信息从何而来时，就可以查看有效POM。有效settings同理，特别是当你发现自己配置的 settings.xml没有生效时，就可以用help:effective-settings来验证。此外，maven-help-plugin的describe目标可以帮助你描述任何一个Maven插件的信息，还有all-profiles目标和active-profiles目标帮助查看项目的Profile。</p><h3 id="6）maven-resources-plugin"><a href="#6）maven-resources-plugin" class="headerlink" title="6）maven-resources-plugin"></a>6）maven-resources-plugin</h3><blockquote><ul><li>官网插件地址：<a href="http://maven.apache.org/plugins/maven-resources-plugin/" target="_blank" rel="noopener">http://maven.apache.org/plugins/maven-resources-plugin</a></li><li>作用：为了使项目结构更为清晰，Maven区别对待Java代码文件和资源文件，maven-compiler-plugin用来编译Java代码，maven-resources-plugin则用来处理资源文件。默认的主资源文件目录是src/main/resources，很多用户会需要添加额外的资源文件目录，这个时候就可以通过配置maven-resources-plugin来实现。此外，资源文件过滤也是Maven的一大特性，你可以在资源文件中使用${propertyName}形式的Maven属性，然后配置maven-resources-plugin开启对资源文件的过滤，之后就可以针对不同环境通过命令行或者Profile传入属性的值，以实现更为灵活的构建。</li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">代码6.1 设置资源文件编码</span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span>    <span class="comment">&lt;!--配置资源文件编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 7）versions-maven-plugin</span><br><span class="line"></span><br><span class="line"> 官网插件地址：[http://mojo.codehaus.org/versions-maven-plugin/](http://mojo.codehaus.org/versions-maven-plugin/)</span><br><span class="line"> </span><br><span class="line">很多Maven用户遇到过这样一个问题，当项目包含大量模块的时候，为他们集体更新版本就变成一件烦人的事情，到底有没有自动化工具能帮助完成这件 事情呢？（当然你可以使用sed之类的文本操作工具，不过不在本文讨论范围）答案是肯定的，versions-maven- plugin提供了很多目标帮助你管理Maven项目的各种版本信息。例如最常用的，命令 mvn versions:set -DnewVersion=1.1-SNAPSHOT 就能帮助你把所有模块的版本更新到1.1-SNAPSHOT。该插件还提供了其他一些很有用的目标，display-dependency- updates能告诉你项目依赖有哪些可用的更新；类似的display-plugin-updates能告诉你可用的插件更新；然后use- latest-versions能自动帮你将所有依赖升级到最新版本。最后，如果你对所做的更改满意，则可以使用 mvn versions:commit 提交，不满意的话也可以使用 mvn versions:revert 进行撤销。</span><br><span class="line"></span><br><span class="line">## 8 war包相关的例子-执行打war阶段的时候自动执行</span><br><span class="line"></span><br><span class="line">- 官网地址：[https://maven.apache.org/plugins/maven-war-plugin](https://maven.apache.org/plugins/maven-war-plugin/)</span><br><span class="line">- 所有的路径都是相对于pom文件的路径</span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- maven-war-plugin：mvn install可以将项目打成war包 --&gt;</span></span><br><span class="line">```xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 需要打包的目标文件路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定build资源具体目录，默认是base directory。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>WEB-INF<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包的文件叫什么 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/web.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包后放在这个目录下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">warSourceDirectory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">warSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">webXml</span>&gt;</span>src/main/webapp/WEB-INF/web.xml<span class="tag">&lt;/<span class="name">webXml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> 说明：指定打包的目录和对应的web.xml文件</span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">webResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">webResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-编译插件使用实例-执行编译阶段的时候会自动执行"><a href="#9-编译插件使用实例-执行编译阶段的时候会自动执行" class="headerlink" title="9 编译插件使用实例-执行编译阶段的时候会自动执行"></a>9 编译插件使用实例-执行编译阶段的时候会自动执行</h2><ul><li>官网地址:<a href="https://maven.apache.org/plugins/maven-compiler-plugin/" target="_blank" rel="noopener">https://maven.apache.org/plugins/maven-compiler-plugin/</a></li><li>使用实例：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>                 </span><br><span class="line">    <span class="comment">&lt;!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>      </span><br><span class="line">        <span class="comment">&lt;!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法)，会存在target不同于source的情况 --&gt;</span>                    </span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span> <span class="comment">&lt;!-- 源代码使用的JDK版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 需要生成的目标class文件的编译版本 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span><span class="comment">&lt;!-- 字符集编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span><span class="comment">&lt;!-- 跳过测试 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span>               </span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="10-spring打可执行的插件"><a href="#10-spring打可执行的插件" class="headerlink" title="10 spring打可执行的插件"></a>10 spring打可执行的插件</h2><ul><li>官网地址:<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html</a></li><li>spring打包实例<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>主类<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;maven插件知识总览&quot;&gt;&lt;a href=&quot;#maven插件知识总览&quot; class=&quot;headerlink&quot; title=&quot;maven插件知识总览&quot;&gt;&lt;/a&gt;maven插件知识总览&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-对于maven插件的了解&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="MAVEN" scheme="https://tonywang1.github.io/categories/MAVEN/"/>
    
    
      <category term="MAVEN" scheme="https://tonywang1.github.io/tags/MAVEN/"/>
    
  </entry>
  
  <entry>
    <title>深入字节</title>
    <link href="https://tonywang1.github.io/2019/09/11/lean_byte/"/>
    <id>https://tonywang1.github.io/2019/09/11/lean_byte/</id>
    <published>2019-09-10T20:32:15.000Z</published>
    <updated>2019-09-17T07:36:10.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入了解字节"><a href="#深入了解字节" class="headerlink" title="深入了解字节"></a>深入了解字节</h1><hr><h2 id="1-为什么要写字节这个东东"><a href="#1-为什么要写字节这个东东" class="headerlink" title="1.为什么要写字节这个东东"></a>1.为什么要写字节这个东东</h2><blockquote><ul><li>做JAVA项目的时候总会碰到读写字节的过程</li><li>经常有字符串和字节互相转化的过程</li><li>每次只是知道怎么做，但是不知道为什么这样做</li></ul></blockquote><p>希望经过这篇文章整理，彻底了解这个字节以及字节和用户输入文字之间的关系。</p><h2 id="2-了解一下具体什么是字节"><a href="#2-了解一下具体什么是字节" class="headerlink" title="2. 了解一下具体什么是字节"></a>2. 了解一下具体什么是字节</h2><p> 在编程的时候总会遇到字节数组，如读取一个文件时候多个字节一起读、Socket的网络编程的时候读取数据也是按照字节读取的，总会思考这个字节是什么？</p><blockquote><p>答案：字节实际上就是我们在换算单位时候用到的byte，一个byte=8位（八个0、1组成的一串二进制的数字）</p></blockquote><h2 id="3-在java中字符串是如何转化为字节的"><a href="#3-在java中字符串是如何转化为字节的" class="headerlink" title="3. 在java中字符串是如何转化为字节的"></a>3. 在java中字符串是如何转化为字节的</h2><p>计算机起源美国 <code>-&gt;</code> 美国使用英语 <code>-&gt;</code> 英语（数字、大小写字母、控制字符标点符号、运算字符等组成） <code>-&gt;</code> 8位二进制数（共255个）表示所有字符<br>即：你每次输入一个字符-计算机会到对照表中查找对应的值(二进制、十进制) <code>-&gt;</code> 二进制就可以被计算机识别<br>到此计算机可以识别人类输入的所有英文字符 <code>-&gt;</code> 即字符到二进制的转换</p><blockquote><p>问题出现 <code>-&gt;</code> 非英语字符通过对照表找不到对应的值，就不能识别如何处理对应的字符，如：输入中文“您”，到对照表中找不到，计算机就不认识。<br>那么，就需要有其他的对照表出现：即gb2312、gbk、utf-8等</p></blockquote><p><strong><em>一个中文转换成字符的过程是怎么样子的？</em></strong></p><blockquote><ul><li>字符：‘我’-utf-8编码-&gt;BDE4-&gt;251059（十进制）-&gt;6211（十六进制）<code>-&gt;</code> 1100111011010010 (二进制)</li></ul></blockquote><blockquote><ul><li>‘中’-&gt;对应的Unicode表的值4E2D（十六进制）（java使用Unicode编码）-&gt;对应的二进制100111000101101-&gt;utf-8填充规则转换-&gt;11100100  10111000 10101101 </li><li>UTF-8最多可用到6个字节则二进制变为100 111000 101101一共3个部分<br><a href="https://blog.csdn.net/liuwenjie517333813/article/details/68060904" target="_blank" rel="noopener">参考链接</a></li></ul></blockquote><h2 id="4-对于计算机的深入思考"><a href="#4-对于计算机的深入思考" class="headerlink" title="4. 对于计算机的深入思考"></a>4. 对于计算机的深入思考</h2><p>计算机终究只认识两个东西0、1,但是计算机要处理的是人类的输入并且最后要输出的东西也是要给人类使用的，这时候计算机要处理以下问题</p><ol><li>接受人类输入的文字</li><li>把字符转化为自己能识别的0和1</li><li>对转化过的数据进行二进制之间的计算</li><li>对最终的计算结果进行编码成为用户可见的文字并呈现给使用者</li></ol><blockquote><p>其中把人类输入文字转换为0和1,和最终转换为用户可见的文字过程需要使用字符编码</p><ul><li>解码:计算机识别的对应编码的二进制数字，按照编码格式转化为统一的编码格式，然后到编码表中找到对应的文字</li><li>编码：文字根据编码表找到对应的数值，然后转换为UNIQUE编码的二进制，在转换为工程对应的编码的二进制格式数据</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入了解字节&quot;&gt;&lt;a href=&quot;#深入了解字节&quot; class=&quot;headerlink&quot; title=&quot;深入了解字节&quot;&gt;&lt;/a&gt;深入了解字节&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-为什么要写字节这个东东&quot;&gt;&lt;a href=&quot;#1-为什么要写字节这个东东&quot; clas
      
    
    </summary>
    
      <category term="JAVA" scheme="https://tonywang1.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://tonywang1.github.io/tags/JAVA/"/>
    
  </entry>
  
</feed>
